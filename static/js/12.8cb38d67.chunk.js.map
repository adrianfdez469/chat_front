{"version":3,"sources":["utils/socket.js","utils/axiosHook.js","components/uiComponents/notification/notification.hook.js","conf/configuration.js","utils/useLogout.js","utils/OS_NotificationPermission.js","utils/browserVisibility.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/incomingMsgSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/blokedContactSubscriber.js","components/events/recibedMessageSubscriber.js","components/events/index.js"],"names":["socket","socketClient","getSocket","openSocket","DEFAULT_CONFIG","server","close","text","errConn","es","en","getTokenIdError","useAxiosHook","useNotificationHook","openErrorNotification","openSuccessNotification","idioma","useRecoilValue","idiomaState","firebaseCurrentToken","firebaseCurrentTokenState","logout","useLogout","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","getAxiosRequest","idToken","axios","post","headers","then","resp","catch","err","response","console","log","firebase","auth","currentUser","getIdToken","NotificationHook","useRecoilState","notificationAtom","notificationState","setNotificationState","defaultToOpem","open","autoHideDuration","openSpecificNotification","severity","msg","openNotification","properties","openInfoNotification","openWarningNotification","location","origin","setLoginData","useSetRecoilState","loginData","setUserAvatar","userAvatarState","setSubscribe","subscribeToEventsState","setContactList","contactListState","setFriends","friendsAtom","client","useCallback","eraseConversationsWithContacts","emit","signOut","allowPermission","localStorage","removeItem","askNotificationPermission","callback","handlePermission","permission","Notification","window","requestPermission","e","checkNotificationPromise","permissionType","denyPermission","setItem","allowedNotifications","getItem","hidden","visibilityChange","document","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","handleVisibilityChange","useEffect","addEventListener","undefined","UserSubscriber","props","friendDispatcher","friendSelector","userData","enqueueSnackbar","useSnackbar","isBrowserVisble","useBrowserVisibility","on","data","payload","connected","OS_Notification","OSNotification","nickname","content","body","icon","logo","notification","action","userId","off","socketId","disconnected","IncomingMsgSubscriber","chatConversation","conversation","setConvertation","newStateObj","myMsg","active","novistos","DeclinedFriendshipSubscriber","useNotifications","useAxios","declinerId","socketIdDecliner","declinedId","socketIdDeclined","friendId","status","friend","declinedInv","variant","connError","RequestFriendSubscriber","userIdRequester","userIdRequested","socketIdRequester","requestedInv","errorLoadingFriends","AcceptedFriendshipSubscriber","accepterId","socketIdAccepter","accept","DeletedContactSubscriber","deleterId","socketIdDeleter","delete","BlokedContactSubscriber","blokerId","socketIdBloked","block","stackFns","RecibedMessageSubscriber","addMsgToConversation","addMsgToConversationSelector","editMsgToStateSaved","editMsgToStateSavedSelector","editAllMsgToReaded","editAllMsgToReadedSelector","activeChatContactId","activeChatWith","friends","putInQueque","React","fn","push","reverse","forEach","userOriginId","messageId","socketIdSender","datetime","contact","consecutive","find","f","contactId","writingYou","dataObj","cantidad","lastMessage","notifyTo","token","state","soketIdContact","Events"],"mappings":"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","file":"static/js/12.8cb38d67.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    },\r\n    close: () => {\r\n        socket.close();\r\n    }\r\n};\r\n\r\nexport default socketClient;","//import React from 'react';\r\nimport axios from 'axios';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nimport {idiomaState, firebaseCurrentTokenState} from '../components/recoil/atoms';\r\nimport firebase from './firebase';\r\nimport useLogout from './useLogout';\r\n\r\nconst text = {\r\n    errConn: {\r\n        es: \"Error de conexión\",\r\n        en: \"Network error\"\r\n    },\r\n    getTokenIdError: {\r\n        es: \"Su sesión ha expirado\",\r\n        en: \"Expired session\"\r\n    }\r\n}\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const logout = useLogout();\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const getAxiosRequest = idToken => axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n            bodyParams, \r\n            {\r\n                headers: {\r\n                    'Authorization': idToken\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                if(doFnAfterSuccess) doFnAfterSuccess(resp, idToken);\r\n                return resp;\r\n            })\r\n            .catch(err => {\r\n                if(!err.response){\r\n                    openErrorNotification(text.errConn[idioma]);                       \r\n                }else if(messageOnError) openErrorNotification(messageOnError);\r\n\r\n                if(doFnAfterError) doFnAfterError(err);\r\n                return err;\r\n            })\r\n    \r\n\r\n        if(firebaseCurrentToken){\r\n            return getAxiosRequest(firebaseCurrentToken)\r\n                .catch(err => {\r\n                    console.log('Error al realizar la peticion con el token guardado en recoil state, asi que intentamos usando firebase');\r\n                    return firebase.auth().currentUser.getIdToken(true)\r\n                        .then(idToken => {\r\n                            return getAxiosRequest(idToken);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log('Error al realizar la peticion con el token proveniente de firebase');\r\n                            logout();\r\n                            return err;\r\n                        });\r\n                })\r\n        }\r\n    };   \r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import React from 'react';\r\nimport {useRecoilState} from 'recoil'\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\nconst NotificationHook = () => {\r\n    \r\n    const [notificationState, setNotificationState] = useRecoilState(notificationAtom);\r\n\r\n    const defaultToOpem = {\r\n        ...notificationState,\r\n        open: true,\r\n        autoHideDuration: 3000\r\n    };\r\n\r\n    const openNotification = properties => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    const openSpecificNotification = (severity, msg) => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            severity: severity,\r\n            msg: msg\r\n        });\r\n    }\r\n\r\n    const openSuccessNotification = msg => {\r\n        openSpecificNotification(\"success\",msg);\r\n    }\r\n\r\n    const openWarningNotification = msg => {\r\n        openSpecificNotification(\"warning\",msg);\r\n    }\r\n\r\n    const openErrorNotification = msg => {\r\n        openSpecificNotification(\"error\",msg);\r\n    }\r\n\r\n    const openInfoNotification = msg => {\r\n        openSpecificNotification(\"info\",msg);\r\n    }\r\n\r\n    return {    \r\n        openNotification: openNotification,\r\n        openSuccessNotification: openSuccessNotification,\r\n        openErrorNotification: openErrorNotification,\r\n        openInfoNotification: openInfoNotification,\r\n        openWarningNotification: openWarningNotification\r\n    };\r\n\r\n}\r\nexport default NotificationHook;","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    server: location.origin //\"https://shut-app-back.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import {useSetRecoilState} from 'recoil';\r\nimport {loginData, userAvatarState, subscribeToEventsState, contactListState, friendsAtom, eraseConversationsWithContacts} from '../components/recoil/atoms';\r\nimport { useCallback } from 'react';\r\nimport socketClient from './socket';\r\nimport firebase from './firebase';\r\n\r\nconst useLogout = () => {\r\n\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setUserAvatar = useSetRecoilState(userAvatarState);\r\n    const setSubscribe = useSetRecoilState(subscribeToEventsState);\r\n    const setContactList = useSetRecoilState(contactListState);\r\n    const setFriends = useSetRecoilState(friendsAtom);\r\n    const client = socketClient.getSocket();\r\n\r\n    return useCallback(() => {\r\n        eraseConversationsWithContacts();\r\n        setUserAvatar(null);\r\n        setContactList([]);\r\n        setFriends([]);\r\n        client.emit('logout', {});\r\n        \r\n        setSubscribe(false);\r\n        setLoginData(null);\r\n        firebase.auth().signOut();\r\n        \r\n    }, []);\r\n}\r\nexport default useLogout;","const askNotificationPermission = callback => {\r\n    allowPermission();\r\n    const checkNotificationPromise = () => {\r\n        try { Notification.requestPermission().then(); } \r\n        catch(e) { return false;}\r\n        return true;\r\n    }\r\n\r\n    // function to actually ask the permissions\r\n    const handlePermission = permission => {\r\n        // Whatever the user answers, we make sure Chrome stores the information\r\n        if(!('permission' in Notification)) {\r\n            Notification.permission = permission;\r\n        }\r\n        if(callback) callback();\r\n    }\r\n\r\n    // Let's check if the browser supports notifications\r\n    if (!('Notification' in window)) {\r\n        console.log(\"This browser does not support notifications.\");\r\n    } else {\r\n        if(checkNotificationPromise()) {\r\n            Notification.requestPermission()\r\n                .then((permission) => {\r\n                    handlePermission(permission);\r\n                 })\r\n        } else {\r\n            Notification.requestPermission(function(permission) {\r\n                handlePermission(permission);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst denyPermission = () => {\r\n    localStorage.setItem('denyOSNotification', true);\r\n}\r\nconst allowPermission = () => {\r\n    localStorage.removeItem('denyOSNotification');\r\n}\r\n\r\nconst allowedNotifications = () => {\r\n    return Notification.permission === 'granted' && !localStorage.getItem('denyOSNotification');\r\n}\r\nconst permissionType = () => {\r\n\r\n    return Notification.permission;\r\n}\r\n\r\nexport default {askNotificationPermission, permissionType, denyPermission, allowedNotifications};","import React, {useState, useEffect} from 'react';\r\n  \r\nlet hidden, visibilityChange; \r\nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support \r\n    hidden = \"hidden\";\r\n    visibilityChange = \"visibilitychange\";\r\n} else if (typeof document.msHidden !== \"undefined\") {\r\n    hidden = \"msHidden\";\r\n    visibilityChange = \"msvisibilitychange\";\r\n} else if (typeof document.webkitHidden !== \"undefined\") {\r\n    hidden = \"webkitHidden\";\r\n    visibilityChange = \"webkitvisibilitychange\";\r\n}\r\n\r\nconst usePageVisibility = () => {\r\n\r\n    const [isVisible, setIsVisible] = useState(true);\r\n\r\n    \r\n\r\n    const handleVisibilityChange = () => {\r\n        if (document[hidden]) {\r\n            //console.log('No hay visibilidad del navegador');\r\n            setIsVisible(false);\r\n        } else {\r\n            //console.log('Hay visibilidad del navegador');    \r\n            setIsVisible(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof document.addEventListener === \"undefined\" || hidden === undefined) {\r\n            console.log(\"Switch to a Google Chrome or Firefox browser, that supports the Page Visibility API.\");\r\n            setIsVisible(false);\r\n        } else {\r\n            document.addEventListener(visibilityChange, handleVisibilityChange, false);\r\n        }\r\n    }, []);\r\n\r\n    return isVisible;\r\n\r\n}\r\n  export default usePageVisibility;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst UserSubscriber = props => {   \r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    useEffect(() => {\r\n\r\n        client.on('new user', data => {\r\n\r\n            let payload = {\r\n                data:data,\r\n                msg: text.connected\r\n            };\r\n            if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                payload.OSNotification = (nickname, content) => {\r\n                    new Notification(nickname, { body: content, icon: logo });\r\n                }\r\n            }else{\r\n                payload.notification = enqueueSnackbar\r\n            }\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: payload\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n\r\n        return () => client.off('new user');\r\n    }, [friendDispatcher, client, userData, isBrowserVisble]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst UserSubscriber = props => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n\r\n        return () => client.off('user disconnect');\r\n    }, []);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {chatConversation} from '../recoil/atoms';\r\nimport socket from '../../utils/socket'\r\n\r\nconst IncomingMsgSubscriber = props => {\r\n\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n    \r\n    useEffect(() => {\r\n\r\n        client.on('message', data => {\r\n            const newStateObj = {...conversation};\r\n            if(conversation[data.socketId]){\r\n                newStateObj[data.socketId] = {...conversation[data.socketId]};\r\n                if(conversation[data.socketId].text){\r\n                    newStateObj[data.socketId].text = [...conversation[data.socketId].text, {myMsg: false, msg: data.msg}];\r\n                    if(data.socketId !== newStateObj.active){\r\n                        newStateObj[data.socketId].novistos = newStateObj[data.socketId].novistos + 1; \r\n                    }\r\n                }else{\r\n                    newStateObj[data.socketId].text = [];\r\n                }\r\n                \r\n            }else{\r\n                newStateObj[data.socketId] = {\r\n                    text: [{myMsg: false, msg: data.msg}],\r\n                    nickname: null,\r\n                    socketId: null,\r\n                    novistos: 1\r\n                }\r\n            }\r\n            setConvertation(newStateObj);\r\n        });\r\n\r\n        return () => client.off('message');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default IncomingMsgSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxios from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst DeclinedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxios();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            postRequest({\r\n                url: \"/users/getFriendById\",\r\n                bodyParams: {\r\n                    friendId: declinerId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        \r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.declinedInv[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                        }})\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return () => client.off('declined friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeclinedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst RequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            \r\n            if(userIdRequested === userData.userId){\r\n                \r\n                postRequest({\r\n                    url: '/users/getFriendById',\r\n                    bodyParams: {\r\n                        friendId: userIdRequester\r\n                    },\r\n                    doFnAfterSuccess: resp => {\r\n                        if(resp.status === 200){                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            const friend = resp.data.friend;\r\n                            if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                                new Notification(friend.nickname, { body: `${friend.nickname} ${text.requestedInv[idioma]}`, icon: logo });\r\n                            }else{\r\n                                enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                            }\r\n                        }\r\n                    },\r\n                    doFnAfterError: err => {\r\n                        if(!err.response){\r\n                            openErrorNotification(text.connError[idioma]);\r\n                        }else{\r\n                            openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                        }\r\n                    }\r\n                });    \r\n            }\r\n        });\r\n\r\n        return () => client.off('requested friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RequestFriendSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission'\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst AcceptedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            postRequest({\r\n                url: '/users/getFriendById',\r\n                bodyParams: {\r\n                    friendId: accepterId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n\r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.accept[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            }); \r\n            \r\n        });\r\n\r\n        return () => client.off('accepted friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default AcceptedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxios from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst DeletedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxios();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            postRequest({\r\n                url: \"/users/getFriendById\",\r\n                bodyParams: {\r\n                    friendId: deleterId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.delete[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return () => client.off('deleted contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeletedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst BlokedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            postRequest({\r\n                url: '/users/getFriendById',\r\n                bodyParams:{\r\n                    friendId: blokerId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        \r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.block[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                        }\r\n                        \r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return () => client.off('bloked contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default BlokedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState, firebaseCurrentTokenState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nlet stackFns = [];\r\nconst RecibedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const isBrowserVisble = useBrowserVisibility();\r\n    \r\n    const putInQueque = React.useCallback(fn => {\r\n        stackFns.push(fn);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(isBrowserVisble){\r\n            stackFns\r\n                .reverse()\r\n                .forEach(fn => fn());\r\n            stackFns = [];\r\n        }\r\n    }, [isBrowserVisble]);\r\n\r\n    useEffect(() => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime, consecutive}) => {\r\n            \r\n            const contact = friends.find(f => f.contactId === userOriginId);\r\n            if(activeChatContactId !== userOriginId){                \r\n                if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                    new Notification(contact.nickname, { body: content, icon: logo });\r\n                }else{\r\n                    enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n                }\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 1,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n            }else{\r\n                if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                    new Notification(contact.nickname, { body: content, icon: logo });\r\n                }\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 0,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n                const fn = () => {\r\n                    const client = socketClient.getSocket();\r\n                    client.emit('read messages', {\r\n                        userId: userData.userId,\r\n                        contactId: contact.contactId,\r\n                        notifyTo: contact.socketId,\r\n                        token: firebaseCurrentToken\r\n                    });\r\n                }\r\n                if(isBrowserVisble) fn();\r\n                else putInQueque(fn);\r\n                \r\n            }\r\n            addMsgToConversation({\r\n                contactId: userOriginId,\r\n                messageId: messageId,\r\n                content: content,\r\n                datetime: datetime,\r\n                state: 0\r\n            });\r\n        });\r\n\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n\r\n        return () => {\r\n            client.off('recived message');\r\n            client.off('saved message');\r\n            client.off('readed messages');\r\n        };\r\n    });\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RecibedMessageSubscriber;","import React from 'react';\r\n\r\n// Eventos\r\nimport NewUserSubscriber from './newUserSubscriber';\r\nimport UserDisconnectSubscriber from './userDisconnectSubscriber';\r\nimport IncomingMsgSubscriber from './incomingMsgSubscriber';\r\nimport DeclinedFriendshipSubscriber from './declinedFriendshipSubscriber';\r\nimport RequestFriendSubscriber from './requestFriendshipSubscriber';\r\nimport AcceptFriendshipSubscriber from './acceptedFriendshipSubscriber';\r\nimport DeletedContactSubscriber from './deletedContactSubscriber';\r\nimport BlokedContactSubscriber from './blokedContactSubscriber';\r\nimport RecibedMessageSubscriber from './recibedMessageSubscriber';\r\n\r\n\r\nconst Events = props => {\r\n\r\n    return <>\r\n        <NewUserSubscriber />\r\n        <UserDisconnectSubscriber />\r\n        <IncomingMsgSubscriber />\r\n        <RequestFriendSubscriber />\r\n        <DeclinedFriendshipSubscriber />\r\n        <AcceptFriendshipSubscriber />\r\n        <DeletedContactSubscriber />\r\n        <BlokedContactSubscriber />\r\n        <RecibedMessageSubscriber />\r\n    </>;\r\n\r\n}\r\nexport default Events;"],"sourceRoot":""}