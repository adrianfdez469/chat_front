{"version":3,"sources":["utils/socket.js","utils/axiosHook.js","components/uiComponents/notification/notification.hook.js","utils/OS_NotificationPermission.js","conf/configuration.js","utils/useLogout.js","utils/browserVisibility.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/recibedMessageSubscriber.js","components/events/savedMessageSubscriber.js","components/events/readedMessageSubscriber.js","components/events/blokedContactSubscriber.js","components/events/index.js","../node_modules/@material-ui/core/esm/AppBar/AppBar.js","../node_modules/@material-ui/core/esm/Toolbar/Toolbar.js","../node_modules/@material-ui/icons/ArrowBack.js","../node_modules/@material-ui/icons/Cached.js","../node_modules/@material-ui/icons/Done.js","../node_modules/@material-ui/icons/DoneAll.js","../node_modules/@material-ui/icons/Telegram.js","view/chat/chatHeader/chatHeader.view.js","view/chat/chatHeader/chatHeader.controller.js","view/chat/chatHeader/index.js","../node_modules/@material-ui/core/esm/colors/lightGreen.js","view/chat/chatBody/chatBody.view.js","view/chat/chatBody/chatBody.controller.js","view/chat/chatBody/index.js","view/chat/chatEditor/chatEditor.view.js","view/chat/chatEditor/chatEditor.controller.js","view/chat/chatEditor/index.js","view/chat/chat.view.js","view/chat/index.js"],"names":["socket","socketClient","getSocket","openSocket","DEFAULT_CONFIG","server","close","text","errConn","es","en","getTokenIdError","useAxiosHook","useNotificationHook","openErrorNotification","openSuccessNotification","idioma","useRecoilValue","idiomaState","firebaseCurrentToken","firebaseCurrentTokenState","logout","useLogout","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","getAxiosRequest","idToken","axios","post","headers","then","resp","catch","err","response","console","log","firebase","auth","currentUser","getIdToken","NotificationHook","useRecoilState","notificationAtom","notificationState","setNotificationState","defaultToOpem","open","autoHideDuration","openSpecificNotification","severity","msg","openNotification","properties","openInfoNotification","openWarningNotification","allowPermission","localStorage","removeItem","askNotificationPermission","callback","handlePermission","permission","Notification","window","requestPermission","e","checkNotificationPromise","permissionType","denyPermission","setItem","allowedNotifications","getItem","setLoginData","useSetRecoilState","loginData","setUserAvatar","userAvatarState","setContactList","contactListState","setFriends","friendsAtom","client","setView","view","getAtom","useCallback","eraseConversationsWithContacts","emit","signOut","posibleViews","LOGIN","hidden","visibilityChange","document","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","handleVisibilityChange","useEffect","addEventListener","undefined","useNewUserSubscriber","props","friendDispatcher","friendSelector","userData","enqueueSnackbar","useSnackbar","isBrowserVisble","useBrowserVisibility","subscribeNewUser","on","data","payload","connected","OS_Notification","OSNotification","nickname","content","body","icon","logo","notification","action","userId","unsSubscribeNewUser","off","useDisconnectSubscriber","subscribeDisconnect","socketId","disconnected","unSubscribeDisconnect","useRequestFriendSubscriber","useNotifications","subscribeRequestFriend","userIdRequester","userIdRequested","socketIdRequester","friendId","status","friend","requestedInv","variant","errorLoadingFriends","connError","unSubscribeRequestFriend","useAcceptedFriendshipSubscriber","subscribeAcceptedFriendship","accepterId","socketIdAccepter","accept","unSubscribeAcceptedFriendship","useDeclinedFriendship","useAxios","subscribeDeclinedFriendship","declinerId","socketIdDecliner","declinedId","socketIdDeclined","declinedInv","unSubscribeDeclinedFriendship","useDeleteContatctSubscriber","subscribeDeleteContatct","deleterId","socketIdDeleter","delete","unSubscribeDeleteContatct","stackFns","useRecibedMessageSubscriber","addMsgToConversation","addMsgToConversationSelector","activeChatContactId","activeChatWith","friends","putInQueque","React","fn","push","reverse","forEach","subscribeRecibedMessage","unSubscribeRecibedMessage","userOriginId","messageId","socketIdSender","datetime","length","contact","find","f","contactId","writingYou","dataObj","cantidad","lastMessage","notifyTo","token","state","useSavedMessageSubscriber","editMsgToStateSaved","editMsgToStateSavedSelector","subscribeSavedMessage","consecutive","soketIdContact","unSubscribeSavedMessage","useReadedMessageSubscriber","editAllMsgToReaded","editAllMsgToReadedSelector","subscribeReadedMessage","unSubscribeReadedMessage","useBlokedContactSubscriber","subscribeBlokedContact","blokerId","socketIdBloked","block","unSubscribeBlokedContact","useEvents","useUserDisconnectSubscriber","useAcceptFriendshipSubscriber","useDeclinedFriendshipSubscriber","useDeletedContactSubscriber","subscribeAll","unSubscribeAll","AppBar","ref","classes","className","_props$color","color","_props$position","position","other","_objectWithoutProperties","Paper","_extends","square","component","elevation","clsx","root","concat","capitalize","withStyles","theme","backgroundColorDefault","palette","type","grey","display","flexDirection","width","boxSizing","zIndex","appBar","flexShrink","positionFixed","top","left","right","positionAbsolute","positionSticky","positionStatic","positionRelative","colorDefault","backgroundColor","getContrastText","colorPrimary","primary","main","contrastText","colorSecondary","secondary","colorInherit","colorTransparent","name","Toolbar","_props$component","Component","_props$disableGutters","disableGutters","_props$variant","gutters","alignItems","_defineProperty","paddingLeft","spacing","paddingRight","breakpoints","up","regular","mixins","toolbar","dense","minHeight","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useStyles","makeStyles","grow","flexGrow","menuButton","marginRight","title","marginLeft","customAppBar","values","sm","OnlineStyledBadge","badge","boxShadow","background","paper","height","borderRadius","animation","border","transform","opacity","Badge","OfflineStyledBadge","OnlineBadge","friendShipStatus","overlap","anchorOrigin","vertical","horizontal","children","memo","closeChat","avatarUrl","IconButton","edge","aria-label","onClick","Avatar","src","Typography","noWrap","idContact","setActiveChatWith","ChatHeader","lightGreen","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","useMessageStyle","message","padding","maxWidth","marginTop","marginBottom","info","dark","timeMessage","disabled","typography","subtitle2","mymsg","textAlign","alignSelf","notmymsg","msgAvatar","myMsgAvatar","notMyMsgAvatar","doneIcon","fontSize","Message","avatarSrc","msgStyle","avatarStyle","options","locale","date","formatRelative","Date","stateIcon","style","alt","useChatStyle","chatConversation","overflowY","offset","offsetDown","bottom","ChatBodyView","messages","element","getElementById","scrollTop","scrollHeight","id","map","elem","idx","arr","key","ChatBodyController","initConversation","initConversationSelector","getConversationWithContact","errorLoadConversation","conversation","ChatBody","textarea","fontFamily","maxHeight","cursor","ChatEditorView","sendMessage","refAreaTexto","keyPress","role","contentEditable","onKeyPress","ChatEditorController","useNotification","useRef","setConsecutive","current","innerText","replace","prev","userDestinyId","toSocketId","focus","notEditable","event","charCode","preventDefault","ChatEditor","ChatView","Chat"],"mappings":"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","file":"static/js/10.768d33be.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    },\r\n    close: () => {\r\n        socket.close();\r\n    }\r\n};\r\n\r\nexport default socketClient;","//import React from 'react';\r\nimport axios from 'axios';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nimport {idiomaState, firebaseCurrentTokenState} from '../components/recoil/atoms';\r\nimport firebase from './firebase';\r\nimport useLogout from './useLogout';\r\n\r\nconst text = {\r\n    errConn: {\r\n        es: \"Error de conexión\",\r\n        en: \"Network error\"\r\n    },\r\n    getTokenIdError: {\r\n        es: \"Su sesión ha expirado\",\r\n        en: \"Expired session\"\r\n    }\r\n}\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const logout = useLogout();\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const getAxiosRequest = idToken => axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n            bodyParams, \r\n            {\r\n                headers: {\r\n                    'Authorization': idToken\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                if(doFnAfterSuccess) doFnAfterSuccess(resp, idToken);\r\n                return resp;\r\n            })\r\n            .catch(err => {\r\n                if(!err.response){\r\n                    openErrorNotification(text.errConn[idioma]);                       \r\n                }else if(messageOnError) openErrorNotification(messageOnError);\r\n\r\n                if(doFnAfterError) doFnAfterError(err);\r\n                return err;\r\n            })\r\n    \r\n\r\n        if(firebaseCurrentToken){\r\n            return getAxiosRequest(firebaseCurrentToken)\r\n                .catch(err => {\r\n                    console.log('Error al realizar la peticion con el token guardado en recoil state, asi que intentamos usando firebase');\r\n                    return firebase.auth().currentUser.getIdToken(true)\r\n                        .then(idToken => {\r\n                            return getAxiosRequest(idToken);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log('Error al realizar la peticion con el token proveniente de firebase');\r\n                            logout();\r\n                            return err;\r\n                        });\r\n                })\r\n        }\r\n    };   \r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import {useRecoilState} from 'recoil'\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\nconst NotificationHook = () => {\r\n    \r\n    const [notificationState, setNotificationState] = useRecoilState(notificationAtom);\r\n\r\n    const defaultToOpem = {\r\n        ...notificationState,\r\n        open: true,\r\n        autoHideDuration: 3000\r\n    };\r\n\r\n    const openNotification = properties => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    const openSpecificNotification = (severity, msg) => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            severity: severity,\r\n            msg: msg\r\n        });\r\n    }\r\n\r\n    const openSuccessNotification = msg => {\r\n        openSpecificNotification(\"success\",msg);\r\n    }\r\n\r\n    const openWarningNotification = msg => {\r\n        openSpecificNotification(\"warning\",msg);\r\n    }\r\n\r\n    const openErrorNotification = msg => {\r\n        openSpecificNotification(\"error\",msg);\r\n    }\r\n\r\n    const openInfoNotification = msg => {\r\n        openSpecificNotification(\"info\",msg);\r\n    }\r\n\r\n    return {    \r\n        openNotification: openNotification,\r\n        openSuccessNotification: openSuccessNotification,\r\n        openErrorNotification: openErrorNotification,\r\n        openInfoNotification: openInfoNotification,\r\n        openWarningNotification: openWarningNotification\r\n    };\r\n\r\n}\r\nexport default NotificationHook;","const askNotificationPermission = callback => {\r\n    allowPermission();\r\n    const checkNotificationPromise = () => {\r\n        try { Notification.requestPermission().then(); } \r\n        catch(e) { return false;}\r\n        return true;\r\n    }\r\n\r\n    // function to actually ask the permissions\r\n    const handlePermission = permission => {\r\n        // Whatever the user answers, we make sure Chrome stores the information\r\n        if(!('permission' in Notification)) {\r\n            Notification.permission = permission;\r\n        }\r\n        if(callback) callback();\r\n    }\r\n\r\n    // Let's check if the browser supports notifications\r\n    if (!('Notification' in window)) {\r\n        console.log(\"This browser does not support notifications.\");\r\n    } else {\r\n        if(checkNotificationPromise()) {\r\n            Notification.requestPermission()\r\n                .then((permission) => {\r\n                    handlePermission(permission);\r\n                 })\r\n        } else {\r\n            Notification.requestPermission(function(permission) {\r\n                handlePermission(permission);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst denyPermission = () => {\r\n    localStorage.setItem('denyOSNotification', true);\r\n}\r\nconst allowPermission = () => {\r\n    localStorage.removeItem('denyOSNotification');\r\n}\r\n\r\nconst allowedNotifications = () => {\r\n    return Notification.permission === 'granted' && !localStorage.getItem('denyOSNotification');\r\n}\r\nconst permissionType = () => {\r\n\r\n    return Notification.permission;\r\n}\r\n\r\nexport default {askNotificationPermission, permissionType, denyPermission, allowedNotifications};","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    //server: location.origin\r\n    server: \"https://shut-app-pro.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import {useSetRecoilState} from 'recoil';\r\nimport {loginData, userAvatarState, contactListState, friendsAtom, eraseConversationsWithContacts, view} from '../components/recoil/atoms';\r\nimport { useCallback } from 'react';\r\nimport socketClient from './socket';\r\nimport firebase from './firebase';\r\nconst useLogout = () => {\r\n\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setUserAvatar = useSetRecoilState(userAvatarState);\r\n    const setContactList = useSetRecoilState(contactListState);\r\n    const setFriends = useSetRecoilState(friendsAtom);\r\n    const client = socketClient.getSocket();\r\n    const setView = useSetRecoilState(view.getAtom);\r\n\r\n    return useCallback(() => {\r\n        eraseConversationsWithContacts();\r\n        setUserAvatar(null);\r\n        setContactList([]);\r\n        setFriends([]);\r\n        client.emit('logout', {});\r\n        socketClient.close();\r\n        setLoginData(null);\r\n        firebase.auth().signOut();\r\n        setView(view.posibleViews.LOGIN);\r\n    }, []);\r\n}\r\nexport default useLogout;","import {useState, useEffect} from 'react';\r\n  \r\nlet hidden, visibilityChange; \r\nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support \r\n    hidden = \"hidden\";\r\n    visibilityChange = \"visibilitychange\";\r\n} else if (typeof document.msHidden !== \"undefined\") {\r\n    hidden = \"msHidden\";\r\n    visibilityChange = \"msvisibilitychange\";\r\n} else if (typeof document.webkitHidden !== \"undefined\") {\r\n    hidden = \"webkitHidden\";\r\n    visibilityChange = \"webkitvisibilitychange\";\r\n}\r\n\r\nconst usePageVisibility = () => {\r\n\r\n    const [isVisible, setIsVisible] = useState(true);\r\n\r\n    \r\n\r\n    const handleVisibilityChange = () => {\r\n        if (document[hidden]) {\r\n            setIsVisible(false);\r\n        } else {\r\n            setIsVisible(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof document.addEventListener === \"undefined\" || hidden === undefined) {\r\n            console.log(\"Switch to a Google Chrome or Firefox browser, that supports the Page Visibility API.\");\r\n            setIsVisible(false);\r\n        } else {\r\n            document.addEventListener(visibilityChange, handleVisibilityChange, false);\r\n        }\r\n    }, []);\r\n\r\n    return isVisible;\r\n\r\n}\r\n  export default usePageVisibility;","//import React from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst useNewUserSubscriber = props => {\r\n\r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeNewUser = () => {\r\n        client.on('new user', data => {\r\n\r\n            let payload = {\r\n                data:data,\r\n                msg: text.connected\r\n            };\r\n            if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                payload.OSNotification = (nickname, content) => {\r\n                    new Notification(nickname, { body: content, icon: logo });\r\n                }\r\n            }else{\r\n                payload.notification = enqueueSnackbar\r\n            }\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: payload\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n    }\r\n\r\n    const unsSubscribeNewUser = () => {\r\n        client.off('new user');\r\n    }\r\n\r\n    return {\r\n        subscribeNewUser: subscribeNewUser,\r\n        unsSubscribeNewUser: unsSubscribeNewUser\r\n    }\r\n\r\n}\r\nexport default useNewUserSubscriber","import {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst useDisconnectSubscriber = () => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const subscribeDisconnect = () => {\r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n    const unSubscribeDisconnect = () => {\r\n        client.off('user disconnect')\r\n    };\r\n\r\n    return {\r\n        subscribeDisconnect: subscribeDisconnect,\r\n        unSubscribeDisconnect: unSubscribeDisconnect\r\n    };\r\n\r\n}\r\n\r\nexport default useDisconnectSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useRequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeRequestFriend = () => {\r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            \r\n            if(userIdRequested === userData.userId){\r\n                \r\n                postRequest({\r\n                    url: '/users/getFriendById',\r\n                    bodyParams: {\r\n                        friendId: userIdRequester\r\n                    },\r\n                    doFnAfterSuccess: resp => {\r\n                        if(resp.status === 200){                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            const friend = resp.data.friend;\r\n\r\n                            if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                                new Notification(friend.nickname, { body: `${friend.nickname} ${text.requestedInv[idioma]}`, icon: logo });\r\n                            }else{\r\n                                enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                            }\r\n                        }\r\n                    },\r\n                    doFnAfterError: err => {\r\n                        if(!err.response){\r\n                            openErrorNotification(text.connError[idioma]);\r\n                        }else{\r\n                            openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                        }\r\n                    }\r\n                });    \r\n            }\r\n        });\r\n    }\r\n\r\n    const unSubscribeRequestFriend = () => {\r\n        client.off('requested friendship');\r\n    }\r\n\r\n    return {\r\n        subscribeRequestFriend: subscribeRequestFriend,\r\n        unSubscribeRequestFriend: unSubscribeRequestFriend\r\n    }\r\n\r\n}\r\n\r\nexport default useRequestFriendSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission'\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useAcceptedFriendshipSubscriber = props => {\r\n    \r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeAcceptedFriendship = () => {\r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            postRequest({\r\n                url: '/users/getFriendById',\r\n                bodyParams: {\r\n                    friendId: accepterId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n\r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.accept[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            }); \r\n            \r\n        });\r\n    };\r\n\r\n    const unSubscribeAcceptedFriendship = () => {\r\n        client.off('accepted friendship');\r\n    };\r\n\r\n    return {\r\n        subscribeAcceptedFriendship: subscribeAcceptedFriendship,\r\n        unSubscribeAcceptedFriendship: unSubscribeAcceptedFriendship\r\n    }\r\n}\r\n\r\nexport default useAcceptedFriendshipSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxios from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useDeclinedFriendship = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxios();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n\r\n    const subscribeDeclinedFriendship = () => {\r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            postRequest({\r\n                url: \"/users/getFriendById\",\r\n                bodyParams: {\r\n                    friendId: declinerId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        \r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.declinedInv[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                        }})\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeDeclinedFriendship = () => {\r\n        client.off('declined friendship');\r\n    }\r\n\r\n    return {\r\n        subscribeDeclinedFriendship: subscribeDeclinedFriendship,\r\n        unSubscribeDeclinedFriendship: unSubscribeDeclinedFriendship\r\n    };\r\n\r\n}\r\n\r\nexport default useDeclinedFriendship;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxios from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useDeleteContatctSubscriber = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxios();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeDeleteContatct = () => {\r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            postRequest({\r\n                url: \"/users/getFriendById\",\r\n                bodyParams: {\r\n                    friendId: deleterId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.delete[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeDeleteContatct = () => {\r\n        client.off('deleted contact');\r\n    }\r\n\r\n    return {\r\n        subscribeDeleteContatct: subscribeDeleteContatct,\r\n        unSubscribeDeleteContatct: unSubscribeDeleteContatct\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default useDeleteContatctSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState, firebaseCurrentTokenState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nlet stackFns = [];\r\n\r\nconst useRecibedMessageSubscriber = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const putInQueque = React.useCallback(fn => {\r\n        stackFns.push(fn);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(isBrowserVisble){\r\n            stackFns\r\n                .reverse()\r\n                .forEach(fn => fn());\r\n            stackFns = [];\r\n        }\r\n    }, [isBrowserVisble]);\r\n\r\n    \r\n    useEffect(() => {\r\n        subscribeRecibedMessage();\r\n        return unSubscribeRecibedMessage;\r\n\r\n    }, [friends, activeChatContactId, isBrowserVisble, idioma]);\r\n\r\n    \r\n    const subscribeRecibedMessage = () => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime}) => {\r\n            \r\n            if(friends.length > 0){\r\n                const contact = friends.find(f => f.contactId === userOriginId);\r\n                if(activeChatContactId !== userOriginId){                \r\n                    if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                        new Notification(contact.nickname, { body: content, icon: logo });\r\n                    }else{\r\n                        enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n                    }\r\n    \r\n                    const dataObj = {\r\n                        [userOriginId]: {\r\n                            cantidad: 1,\r\n                            lastMessage: content,\r\n                            datetime: datetime\r\n                        }\r\n                    };\r\n                    \r\n                    friendDispatcher({\r\n                        action: 'set_message_info',\r\n                        payload: {\r\n                            dataObj: dataObj\r\n                        }\r\n                    });\r\n    \r\n                }else{\r\n                    if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                        new Notification(contact.nickname, { body: content, icon: logo });\r\n                    }\r\n    \r\n                    const dataObj = {\r\n                        [userOriginId]: {\r\n                            cantidad: 0,\r\n                            lastMessage: content,\r\n                            datetime: datetime\r\n                        }\r\n                    };\r\n                    \r\n                    friendDispatcher({\r\n                        action: 'set_message_info',\r\n                        payload: {\r\n                            dataObj: dataObj\r\n                        }\r\n                    });\r\n    \r\n                    const fn = () => {\r\n                        const client = socketClient.getSocket();\r\n                        client.emit('read messages', {\r\n                            userId: userData.userId,\r\n                            contactId: contact.contactId,\r\n                            notifyTo: contact.socketId,\r\n                            token: firebaseCurrentToken\r\n                        });\r\n                    }\r\n                    if(isBrowserVisble) fn();\r\n                    else putInQueque(fn);\r\n                    \r\n                }\r\n                \r\n                addMsgToConversation({\r\n                    contactId: userOriginId,\r\n                    messageId: messageId,\r\n                    content: content,\r\n                    datetime: datetime,\r\n                    state: 0\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const unSubscribeRecibedMessage = () => {\r\n        client.off('recived message');\r\n    }\r\n\r\n    return {\r\n        subscribeRecibedMessage: subscribeRecibedMessage,\r\n        unSubscribeRecibedMessage: unSubscribeRecibedMessage\r\n    };\r\n\r\n}\r\n\r\nexport default useRecibedMessageSubscriber;","import {useSetRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport { editMsgToStateSavedSelector} from '../recoil/selectors';\r\n\r\n\r\nconst useSavedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    \r\n\r\n    const subscribeSavedMessage = () => {\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeSavedMessage = () => {\r\n        client.off('saved message');\r\n    }\r\n\r\n    return {\r\n        subscribeSavedMessage: subscribeSavedMessage,\r\n        unSubscribeSavedMessage: unSubscribeSavedMessage\r\n    };\r\n\r\n}\r\nexport default useSavedMessageSubscriber;","\r\nimport {useSetRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {editAllMsgToReadedSelector} from '../recoil/selectors';\r\n\r\nconst useReadedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n\r\n    const subscribeReadedMessage = () => {\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n    }\r\n\r\n    const unSubscribeReadedMessage = () => {\r\n        client.off('readed messages');\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        subscribeReadedMessage: subscribeReadedMessage,\r\n        unSubscribeReadedMessage: unSubscribeReadedMessage\r\n    };\r\n\r\n}\r\nexport default useReadedMessageSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useBlokedContactSubscriber = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeBlokedContact = () => {\r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            postRequest({\r\n                url: '/users/getFriendById',\r\n                bodyParams:{\r\n                    friendId: blokerId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        \r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.block[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                        }\r\n                        \r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeBlokedContact = () => {\r\n        client.off('bloked contact');\r\n    }\r\n\r\n    return {\r\n        subscribeBlokedContact: subscribeBlokedContact,\r\n        unSubscribeBlokedContact: unSubscribeBlokedContact\r\n    };\r\n\r\n}\r\n\r\nexport default useBlokedContactSubscriber;","import React from 'react';\r\n\r\n// Eventos\r\nimport useNewUserSubscriber from './newUserSubscriber';\r\nimport useUserDisconnectSubscriber from './userDisconnectSubscriber';\r\nimport useRequestFriendSubscriber from './requestFriendshipSubscriber';\r\nimport useAcceptFriendshipSubscriber from './acceptedFriendshipSubscriber';\r\nimport useDeclinedFriendshipSubscriber from './declinedFriendshipSubscriber';\r\nimport useDeletedContactSubscriber from './deletedContactSubscriber';\r\n\r\nimport useRecibedMessageSubscriber from './recibedMessageSubscriber';\r\nimport useSavedMessageSubscriber from './savedMessageSubscriber';\r\nimport useReadedMessageSubscriber from './readedMessageSubscriber';\r\nimport useBlokedContactSubscriber from './blokedContactSubscriber';\r\n\r\n\r\n/*\r\nimport IncomingMsgSubscriber from './incomingMsgSubscriber';\r\n\r\n*/\r\n\r\nconst useEvents = props => {\r\n\r\n    const {subscribeNewUser, unsSubscribeNewUser} = useNewUserSubscriber();\r\n    const {subscribeDisconnect, unSubscribeDisconnect} = useUserDisconnectSubscriber();\r\n    const {subscribeRequestFriend, unSubscribeRequestFriend} = useRequestFriendSubscriber();\r\n    const {subscribeAcceptedFriendship, unSubscribeAcceptedFriendship} = useAcceptFriendshipSubscriber();\r\n    const {subscribeDeclinedFriendship, unSubscribeDeclinedFriendship} = useDeclinedFriendshipSubscriber();\r\n    const {subscribeDeleteContatct, unSubscribeDeleteContatct} = useDeletedContactSubscriber();\r\n    const {subscribeRecibedMessage, unSubscribeRecibedMessage} = useRecibedMessageSubscriber();\r\n    const {subscribeSavedMessage, unSubscribeSavedMessage} = useSavedMessageSubscriber();\r\n    const {subscribeReadedMessage, unSubscribeReadedMessage} = useReadedMessageSubscriber();\r\n    const {subscribeBlokedContact, unSubscribeBlokedContact} = useBlokedContactSubscriber();\r\n\r\n\r\n\r\n    const subscribeAll = React.useCallback(() => {\r\n        subscribeNewUser();\r\n        subscribeDisconnect();\r\n        subscribeRequestFriend();\r\n        subscribeAcceptedFriendship();\r\n        subscribeDeclinedFriendship();\r\n        subscribeDeleteContatct();\r\n        subscribeRecibedMessage();\r\n        subscribeSavedMessage();\r\n        subscribeReadedMessage();\r\n        subscribeBlokedContact();\r\n    },[]);\r\n\r\n    const unSubscribeAll = React.useCallback(() => {\r\n        unsSubscribeNewUser();\r\n        unSubscribeDisconnect();\r\n        unSubscribeRequestFriend();\r\n        unSubscribeAcceptedFriendship();\r\n        unSubscribeDeclinedFriendship();\r\n        unSubscribeDeleteContatct();\r\n        unSubscribeRecibedMessage();\r\n        unSubscribeSavedMessage();\r\n        unSubscribeReadedMessage();\r\n        unSubscribeBlokedContact();\r\n    },[]);\r\n\r\n\r\n\r\n    return {\r\n        subscribeAll: subscribeAll,\r\n        unSubscribeAll: unSubscribeAll\r\n    };\r\n\r\n}\r\nexport default useEvents;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nexport var styles = function styles(theme) {\n  var backgroundColorDefault = theme.palette.type === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      boxSizing: 'border-box',\n      // Prevent padding issue with the Modal and fixed positioned AppBar.\n      zIndex: theme.zIndex.appBar,\n      flexShrink: 0\n    },\n\n    /* Styles applied to the root element if `position=\"fixed\"`. */\n    positionFixed: {\n      position: 'fixed',\n      top: 0,\n      left: 'auto',\n      right: 0,\n      '@media print': {\n        // Prevent the app bar to be visible on each printed page.\n        position: 'absolute'\n      }\n    },\n\n    /* Styles applied to the root element if `position=\"absolute\"`. */\n    positionAbsolute: {\n      position: 'absolute',\n      top: 0,\n      left: 'auto',\n      right: 0\n    },\n\n    /* Styles applied to the root element if `position=\"sticky\"`. */\n    positionSticky: {\n      // ⚠️ sticky is not supported by IE 11.\n      position: 'sticky',\n      top: 0,\n      left: 'auto',\n      right: 0\n    },\n\n    /* Styles applied to the root element if `position=\"static\"`. */\n    positionStatic: {\n      position: 'static'\n    },\n\n    /* Styles applied to the root element if `position=\"relative\"`. */\n    positionRelative: {\n      position: 'relative'\n    },\n\n    /* Styles applied to the root element if `color=\"default\"`. */\n    colorDefault: {\n      backgroundColor: backgroundColorDefault,\n      color: theme.palette.getContrastText(backgroundColorDefault)\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.primary.contrastText\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"transparent\"`. */\n    colorTransparent: {\n      backgroundColor: 'transparent',\n      color: 'inherit'\n    }\n  };\n};\nvar AppBar = /*#__PURE__*/React.forwardRef(function AppBar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$position = props.position,\n      position = _props$position === void 0 ? 'fixed' : _props$position,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"position\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    square: true,\n    component: \"header\",\n    elevation: 4,\n    className: clsx(classes.root, classes[\"position\".concat(capitalize(position))], classes[\"color\".concat(capitalize(color))], className, position === 'fixed' && 'mui-fixed'),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? AppBar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']),\n\n  /**\n   * The positioning type. The behavior of the different options is described\n   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\n   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.\n   */\n  position: PropTypes.oneOf(['absolute', 'fixed', 'relative', 'static', 'sticky'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAppBar'\n})(AppBar);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center'\n    },\n\n    /* Styles applied to the root element if `disableGutters={false}`. */\n    gutters: _defineProperty({\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2)\n    }, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }),\n\n    /* Styles applied to the root element if `variant=\"regular\"`. */\n    regular: theme.mixins.toolbar,\n\n    /* Styles applied to the root element if `variant=\"dense\"`. */\n    dense: {\n      minHeight: 48\n    }\n  };\n};\nvar Toolbar = /*#__PURE__*/React.forwardRef(function Toolbar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'regular' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[variant], className, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Toolbar.propTypes = {\n  /**\n   * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, disables gutter padding.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['regular', 'dense'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiToolbar'\n})(Toolbar);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z\"\n}), 'Cached');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"\n}), 'Done');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z\"\n}), 'DoneAll');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M9.78 18.65l.28-4.23 7.68-6.92c.34-.31-.07-.46-.52-.19L7.74 13.3 3.64 12c-.88-.25-.89-.86.2-1.3l15.97-6.16c.73-.33 1.43.18 1.15 1.3l-2.72 12.81c-.19.91-.74 1.13-1.5.71L12.6 16.3l-1.99 1.93c-.23.23-.42.42-.83.42z\"\n}), 'Telegram');\n\nexports.default = _default;","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\n\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(0.5),\r\n    },\r\n    title: {\r\n        display: 'block',\r\n        //display: 'none',\r\n        /*[theme.breakpoints.up('xs')]: {\r\n          display: 'block',\r\n        },*/\r\n\r\n        marginLeft: theme.spacing(1)\r\n        \r\n    },\r\n    customAppBar: {\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.breakpoints.values.sm,\r\n        },\r\n        right: 'auto'\r\n    }\r\n}));\r\n\r\n\r\nconst OnlineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OfflineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: theme.palette.grey[500],\r\n        color: theme.palette.grey[500],\r\n        \r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OnlineBadge = props => {\r\n    \r\n    if(props.contact.socketId && props.contact.friendShipStatus === 1){\r\n        return (<OnlineStyledBadge\r\n                overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    {props.children}\r\n                </OnlineStyledBadge>)\r\n            ;\r\n    }\r\n    else {\r\n        return (<OfflineStyledBadge\r\n            overlap=\"circle\"\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                variant=\"dot\"\r\n            >\r\n                {props.children}\r\n            </OfflineStyledBadge>)\r\n        ;\r\n    }\r\n}\r\n\r\nconst ChatHeaderView = ({closeChat, contact}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    //const avatarUrl = contact.avatarUrl ? DEFAULT_CONFIG.server + contact.avatarUrl : null;\r\n    const avatarUrl = contact.avatarUrl ? contact.avatarUrl : null;\r\n    \r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.customAppBar}>\r\n            <ToolBar>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={closeChat}\r\n                >\r\n                    <ArrowBackIcon />\r\n                </IconButton>\r\n                    <OnlineBadge contact={contact}>\r\n                        <Avatar\r\n                            src={avatarUrl}\r\n                        />\r\n                    </OnlineBadge>\r\n                <Typography className={classes.title} variant=\"h5\" noWrap>\r\n                    {contact.nickname}\r\n                </Typography>\r\n                <div className={classes.grow} />\r\n                <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n            </ToolBar>\r\n        </AppBar>\r\n    );\r\n\r\n}\r\nexport default React.memo(ChatHeaderView);","import React from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport { friendSelector } from '../../../components/recoil/selectors'; \r\nimport { activeChatWith } from '../../../components/recoil/atoms'; \r\nimport ChatHeaderView from './chatHeader.view';\r\n\r\nconst ChatHeaderController = () => {\r\n\r\n    const [idContact, setActiveChatWith] = useRecoilState(activeChatWith);\r\n    const friends = useRecoilValue(friendSelector);\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n\r\n    const closeChat = React.useCallback(() => {\r\n        setActiveChatWith(null);\r\n    }, [])\r\n    \r\n    return <ChatHeaderView \r\n        closeChat={closeChat}\r\n        contact={contact}\r\n    />;\r\n\r\n}\r\nexport default React.memo(ChatHeaderController);","import React from 'react';\r\nimport ChatHeaderController from './chatHeader.controller';\r\nconst ChatHeader = props => {\r\n\r\n    return <ChatHeaderController />;\r\n\r\n}\r\nexport default ChatHeader;","var lightGreen = {\n  50: '#f1f8e9',\n  100: '#dcedc8',\n  200: '#c5e1a5',\n  300: '#aed581',\n  400: '#9ccc65',\n  500: '#8bc34a',\n  600: '#7cb342',\n  700: '#689f38',\n  800: '#558b2f',\n  900: '#33691e',\n  A100: '#ccff90',\n  A200: '#b2ff59',\n  A400: '#76ff03',\n  A700: '#64dd17'\n};\nexport default lightGreen;","import React from 'react';\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { grey, lightGreen } from '@material-ui/core/colors';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport  formatRelative  from 'date-fns/formatRelative'\r\nimport es from 'date-fns/locale/es';\r\n\r\nconst useMessageStyle = makeStyles(theme => ({\r\n    message: {\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(2)}px`,\r\n        maxWidth: '60%',\r\n        //margin: `${theme.spacing(2)}px ${theme.spacing(2)}px`,\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: 0,\r\n        marginLeft: `${theme.spacing(2)}px`,\r\n        marginRight: `${theme.spacing(2)}px`,        \r\n        borderRadius: '10px',\r\n        backgroundColor: theme.palette.info.dark,\r\n        color: theme.palette.info.contrastText,\r\n        position: \"relative\"\r\n    },\r\n    timeMessage: {\r\n        paddingLeft: theme.spacing(2),\r\n        //paddingRight: theme.spacing(2),\r\n        maxWidth: '60%',\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: `${theme.spacing(2)}px`,\r\n        marginRight: `${theme.spacing(1)}px`,\r\n        color: theme.palette.text.disabled,\r\n        ...theme.typography.subtitle2\r\n    },\r\n    mymsg: {\r\n        textAlign: 'right',\r\n        alignSelf: 'flex-end',\r\n        borderRadius: '10px 0 10px 10px'\r\n    },\r\n    notmymsg: { \r\n        alignSelf: 'flex-start',\r\n        borderRadius: '0 10px 10px 10px'\r\n    },\r\n    msgAvatar: {\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        position: \"absolute\",\r\n        top: `-${theme.spacing(1.5)}px`,\r\n    },\r\n    myMsgAvatar : {\r\n        right: `-${theme.spacing(1.5)}px`,\r\n        \r\n    },\r\n    notMyMsgAvatar: {\r\n        left: `-${theme.spacing(1.5)}px`\r\n    },\r\n    doneIcon: {\r\n        marginRight: theme.spacing(1),\r\n        fontSize: theme.spacing(2.2)\r\n    }\r\n}));\r\n\r\nconst Message = React.memo(\r\n    ({state, content, datetime ,contact, avatarSrc, idioma}) => {\r\n\r\n    const classes = useMessageStyle();\r\n\r\n    const msgStyle = state > 0 ? classes.mymsg : classes.notmymsg;\r\n    const avatarStyle = state > 0 ? classes.myMsgAvatar : classes.notMyMsgAvatar;\r\n    //const avatarUrl = state > 0 ? avatarSrc : DEFAULT_CONFIG.server + contact.avatarUrl;\r\n    const avatarUrl = state > 0 ? avatarSrc : contact.avatarUrl;\r\n\r\n    const options = idioma === 'es' ? { locale: es } : {};\r\n    const date = formatRelative(new Date(datetime), new Date(), options)\r\n    \r\n    let stateIcon = null;\r\n    if(state === 1) stateIcon = <CachedIcon className={classes.doneIcon} style={{ color: grey[500] }}/>\r\n    if(state === 2) stateIcon = <DoneIcon className={classes.doneIcon} style={{ color: lightGreen[500] }}/>\r\n    //if(state === 2) stateIcon = <DoneAllIcon className={classes.doneIcon} style={{ color: grey[500] }}/>\r\n    if(state === 3) stateIcon = <DoneAllIcon className={classes.doneIcon} style={{ color: lightGreen[500] }}/>\r\n    \r\n    \r\n    return (<>\r\n        <div className={`${classes.message} ${msgStyle}`}>\r\n            <Avatar\r\n                alt={contact.nickname}\r\n                src={avatarUrl}\r\n                variant=\"circle\"\r\n                className={`${classes.msgAvatar} ${avatarStyle}`}                \r\n            />\r\n            {content}\r\n        </div>\r\n        <span className={` ${msgStyle}`}>\r\n            <span className={`${classes.timeMessage}`}>\r\n                {date}\r\n            </span>\r\n            {stateIcon}\r\n        </span>\r\n        \r\n    </>\r\n    );\r\n});\r\n\r\nconst useChatStyle = makeStyles(theme => ({\r\n    chatConversation: {\r\n        position: 'relative',\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        overflowY: 'auto',\r\n        height: '100%'\r\n        \r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    offsetDown: {\r\n        ...theme.mixins.toolbar, \r\n        bottom: 0,\r\n        position: 'relative'\r\n    }\r\n}));\r\n\r\nconst ChatBodyView = ({contact, avatarSrc, messages, idioma}) => {\r\n\r\n    React.useEffect(() => {\r\n        var element = document.getElementById('chatConversation');\r\n        if(element)\r\n            element.scrollTop = element.scrollHeight;\r\n    });\r\n\r\n    const classes = useChatStyle();\r\n    return (\r\n        \r\n                <div id=\"chatConversation\" className={classes.chatConversation}>\r\n                    <div className={classes.offset} />\r\n                    {\r\n                        messages.map((elem, idx, arr) => {\r\n                            return <Message {...elem} key={idx} contact={contact} avatarSrc={avatarSrc} idioma={idioma}/>\r\n                        })\r\n                    }\r\n                    <div className={classes.offsetDown} />\r\n                </div>\r\n\r\n    );\r\n\r\n}\r\nexport default ChatBodyView;","import React, { useEffect } from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport { friendSelector, initConversationSelector } from '../../../components/recoil/selectors'; \r\nimport {userAvatarState, activeChatWith, idiomaState, getConversationWithContact} from '../../../components/recoil/atoms';\r\nimport ChatBodyView from './chatBody.view';\r\nimport useAxiosHook from '../../../utils/axiosHook';\r\nimport text from './idioma.json';\r\nimport useEvents from '../../../components/events';\r\n\r\nconst ChatBodyController = () => {\r\n    \r\n    const idContact = useRecoilValue(activeChatWith);\r\n    const initConversation = useSetRecoilState(initConversationSelector);\r\n    const messages = useRecoilValue(getConversationWithContact(idContact));\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {subscribeAll, unSubscribeAll} = useEvents();\r\n    \r\n    const friends = useRecoilValue(friendSelector);\r\n    const {postRequest} = useAxiosHook();\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n\r\n    useEffect(() => {\r\n        unSubscribeAll();\r\n        subscribeAll();\r\n    }, [])\r\n\r\n    const loadConversation = () => {\r\n        if(messages.length === 0){\r\n            postRequest({\r\n                url: '/messages/getMessagesByContact',\r\n                messageOnError: text.errorLoadConversation[idioma],\r\n                bodyParams: {contactId: contact.contactId},\r\n                doFnAfterSuccess: (resp, token) => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        initConversation({\r\n                            contactId: contact.contactId,\r\n                            conversation: resp.data.conversation\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadConversation();\r\n    }, []);\r\n\r\n\r\n\r\n    if(messages){\r\n        return <ChatBodyView \r\n                    contact={contact}\r\n                    avatarSrc={avatarSrc}\r\n                    messages={messages}\r\n                    idioma={idioma}\r\n                /> ;\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ChatBodyController;","import React from 'react';\r\nimport ChatBodyController from './chatBody.controller';\r\nconst ChatBody = props => {\r\n\r\n    return <ChatBodyController />;\r\n\r\n}\r\nexport default ChatBody;","import React from 'react';\r\n\r\nimport {AppBar, Toolbar, IconButton, makeStyles} from '@material-ui/core';\r\n\r\nimport TelegramIcon from '@material-ui/icons/Telegram';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    appBar:{\r\n        top: 'auto',\r\n        bottom: 0,\r\n        position: \"fixed\",\r\n        width: '100%',        \r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.breakpoints.values.sm,\r\n        },\r\n        right: 'auto'\r\n    },\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    toolbar: {\r\n        padding: 0\r\n    },\r\n    icon: {\r\n        fontSize: theme.spacing(3.75)\r\n    },\r\n    textarea: {\r\n        border: '1px solid white',\r\n        fontFamily: 'inherit',\r\n        fontSize: 'large',    \r\n        padding: '1px 6px',\r\n        backgroundColor: theme.palette.background.paper,\r\n        //color: 'rgba(0,0,0,0.7)',\r\n        color: theme.palette.text.primary,\r\n        \r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom:  theme.spacing(1),\r\n        maxHeight: theme.spacing(10),\r\n        minHeight: theme.spacing(4),\r\n        overflowY: 'auto',\r\n        borderRadius: theme.spacing(0.5),\r\n        marginLeft: theme.spacing(2),\r\n        cursor: 'text'\r\n    }\r\n}));\r\n\r\n\r\nconst ChatEditorView = ({sendMessage, refAreaTexto, keyPress, }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar color=\"primary\"  className={classes.appBar}>\r\n            <Toolbar variant=\"dense\" className={classes.toolbar}>\r\n                <div className={classes.textarea}  role=\"textbox\" contentEditable ref={refAreaTexto} onKeyPress={keyPress}></div>\r\n                <div className={classes.grow} />\r\n                <IconButton color=\"inherit\" onClick={sendMessage}>\r\n                    <TelegramIcon className={classes.icon}/>\r\n                </IconButton>                \r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n\r\n}\r\nexport default ChatEditorView;","import React, {useRef, useEffect, useState} from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport {loginData, activeChatWith, idiomaState, firebaseCurrentTokenState} from '../../../components/recoil/atoms';\r\nimport {friendSelector, addMsgToConversationSelector} from '../../../components/recoil/selectors';\r\nimport useNotification from '../../../components/uiComponents/notification/notification.hook';\r\nimport ChatEditorView from './chatEditor.view';\r\nimport socketClient from '../../../utils/socket';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst ChatEditorController = props => {\r\n\r\n    const {openWarningNotification} = useNotification();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const idContact = useRecoilValue(activeChatWith);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const friends = useRecoilValue(friendSelector);\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n    const refAreaTexto = useRef('');\r\n    const [consecutive, setConsecutive] = useState(0);\r\n\r\n\r\n    const sendMessage = () => {\r\n\r\n        const oldtext = refAreaTexto.current.innerText;\r\n        const text = oldtext.replace(/^(\\s*\\r*)(.)(\\s*\\r*)$/, '$2');\r\n        if(text !== ''){\r\n            addMsgToConversation({\r\n                contactId: contact.contactId,\r\n                messageId: consecutive,//messageId,\r\n                content: refAreaTexto.current.innerText,\r\n                datetime: new Date(),\r\n                state: 1\r\n            });\r\n            setConsecutive(prev => prev + 1);\r\n\r\n            const client = socketClient.getSocket();\r\n            client.emit('send message', {\r\n                content: refAreaTexto.current.innerText,\r\n                userOriginId: userData.userId,\r\n                userDestinyId: idContact,\r\n                toSocketId: contact.socketId,\r\n                token: firebaseCurrentToken,\r\n                consecutive: consecutive\r\n            });\r\n\r\n            refAreaTexto.current.innerText = '';\r\n            refAreaTexto.current.focus();\r\n        }\r\n    }\r\n\r\n    const keyPress = (event) => {\r\n        \r\n        if(event.charCode === 13){\r\n            event.preventDefault();\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        contact.friendShipStatus !== 5 ? refAreaTexto.current.focus() : openWarningNotification(text.notEditable[idioma]);\r\n    }, []);\r\n\r\n    return contact.friendShipStatus !== 5 ? <ChatEditorView \r\n        sendMessage={sendMessage}\r\n        keyPress={keyPress}\r\n        refAreaTexto={refAreaTexto}\r\n    /> : null;\r\n\r\n}\r\nexport default ChatEditorController;","import React from 'react';\r\n\r\nimport ChatEditorController from './chatEditor.controller';\r\nconst ChatEditor = props => {\r\n\r\n    return <ChatEditorController />;\r\n\r\n}\r\nexport default ChatEditor;","import React from 'react';\r\n\r\n\r\n\r\nimport ChatHeader from './chatHeader';\r\nimport ChatBody from './chatBody';\r\nimport ChatEditor from './chatEditor';\r\n\r\nconst ChatView = () => {\r\n\r\n    return (\r\n        <>\r\n            <ChatHeader />\r\n            <ChatBody />\r\n            <ChatEditor />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default ChatView;","import React from 'react';\r\nimport ChatView from './chat.view';\r\n\r\nconst Chat = props => {\r\n\r\n    return <ChatView />;\r\n}\r\nexport default Chat;"],"sourceRoot":""}