{"version":3,"sources":["view/main/main.view.js","view/main/index.js","components/uiComponents/notification/notification.view.js","components/uiComponents/index.js","view/firebaseAuth/firebaseAuth.view.js","view/firebaseAuth/firebaseAuth.controller.js","view/firebaseAuth/index.js","view/tour/tour.view.js","App.js","serviceWorker.js","index.js","conf/firebaseConf.js","utils/firebase.js","view/tour/tour.atoms.js","components/recoil/atoms.js","components/recoil/selectors.js","statics/logo192-removebg-preview.png","components/uiComponents/notification/notification.atom.js"],"names":["useStyles","makeStyles","theme","container","padding","position","height","overflowY","backgroundColor","palette","background","paper","default","MainView","props","classes","className","Container","maxWidth","component","CssBaseline","children","MainContainer","Alert","elevation","variant","NotificationView","useRecoilState","notificationAtom","notificationState","setNotState","handleClose","event","reason","open","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","msg","Notification","FirebaseAuthView","React","memo","uiConfig","auth","isSignedIn","netError","darModeStyle","useRecoilValue","darkModeAtom","id","onRender","console","log","style","justifyContent","alignItems","display","flexDirection","Avatar","src","logo","width","marginTop","boxShadow","Typography","color","fontSize","CircularProgress","firebaseAuth","signInFlow","signInOptions","firebase","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","loginData","userData","setLoginData","setFirebaseCurrentUser","useSetRecoilState","firebaseCurrentUserState","firebaseCurrentToken","firebaseCurrentTokenState","useState","setSignedIn","setNetError","useEffect","onAuthStateChanged","firebaseUser","currentUser","promise1","getIdToken","promise2","getIdTokenResult","Promise","all","then","idToken","tokenResult","result","data","claims","nameArray","name","split","userId","user_id","nickname","firstName","lastName","filter","it","idx","join","email","gender","catch","err","to","FirebaseAuth","useStyle","helper","idioma","tourAtom","tourState","setTourState","darkModeState","focusStepAtom","focusStep","setFocusStep","setSpeedDialState","speedDialStateAtom","SetaddContactViewOpenState","addContactViewOpenState","friendDispatcher","friendSelector","TOUR_STEPS_STYLED","selector","content","text","tourWelcome","tourSpeedDial","action","tourSpeedDialAdd","tourAddWinUser","tourRequestFriendshipButton","tourFriend","tourFriendDetailStatus","tourFriendActions","tourStepProfile","stepInteraction","finalStep","map","step","steps","isOpen","onRequestClose","badgeContent","curr","tot","of","accentColor","closeWithMask","disableInteraction","rounded","maskSpace","showNavigation","goToStep","nextStep","setTimeout","payload","friend","friendShipStatus","friendShipStatusCode","isTourTest","contactId","prevStep","friendId","onBeforeClose","AsyncToolbar","lazy","AsyncMainButton","AsyncContactList","AsyncChatCmp","AsyncEvents","themeDark","createMuiTheme","type","themeDefault","BodyApp","idiomaState","dark","activeChatWith","ThemeProvider","EntryPointView","path","exact","App","subscribe","subscribeToEventsState","notistackRef","createRef","onClickDismiss","useCallback","key","current","closeSnackbar","fallback","Backdrop","zIndex","maxSnack","preventDuplicate","ref","IconButton","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","firebaseConfig","apiKey","FIREBSAE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","atom","userLang","language","userLanguage","test","getDefaultLanguage","userAvatarState","chatConversation","contactListState","friendsAtom","conversations","eraseConversationsWithContacts","getConversationWithContact","atomStore","tokentimeout","localStorage","getItem","length","sort","f1","f2","socketId","set","a","oldFriends","friends","fIndex","findIndex","f","push","updatedFriend","slice","concat","index","unread","dataObj","cantidad","lastMsg","lastMessage","datetime","oldActive","Array","isArray","dat","conectedFriendName","isUpdated","notification","OSNotification","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","oldConversation","message","_id","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","module","exports"],"mappings":"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","file":"static/js/main.5a123fe1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      padding: 0,\r\n      position: 'relative',\r\n      height: '100vh',\r\n      overflowY: 'hidden',\r\n      backgroundColor: theme.palette.background.paper\r\n    },\r\n    background: {\r\n        backgroundColor: theme.palette.background.default\r\n    }\r\n  }));\r\n\r\nconst MainView = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.background}>\r\n            <Container maxWidth=\"sm\" className={classes.container} component=\"main\">\r\n                <CssBaseline />\r\n                {props.children}\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default MainView;","import React from 'react';\r\nimport ContainerView from './main.view';\r\nconst MainContainer = props => {\r\n\r\n    return <ContainerView {...props}/>;\r\n\r\n}\r\nexport default MainContainer;","import React from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\nconst NotificationView = () => {\r\n    const [notificationState, setNotState] = useRecoilState(notificationAtom);\r\n    \r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setNotState({...notificationState, open: false});\r\n    };\r\n\r\n    return <Snackbar \r\n        open={notificationState.open}\r\n        autoHideDuration={notificationState.autoHideDuration}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical:'top', horizontal:'center' }}\r\n    >\r\n        <Alert\r\n            onClose={handleClose}\r\n            severity={notificationState.severity}\r\n        >\r\n            {notificationState.msg}\r\n        </Alert>\r\n    </Snackbar>;\r\n\r\n}\r\nexport default NotificationView;","import React from 'react';\r\nimport NotificationView from './notification/notification.view';\r\n//import Backdrop from './backdrop/backdrop.view';\r\n\r\nconst Notification = props => {\r\n\r\n    return (\r\n        <>\r\n            <NotificationView />\r\n            {/*<Backdrop />*/}\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Notification;","import React, { Profiler } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { darkModeAtom } from '../../components/recoil/atoms';\r\nimport StyledFirebaseAuth  from 'react-firebaseui/StyledFirebaseAuth';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport WifiOffIcon from '@material-ui/icons/WifiOff';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst FirebaseAuthView = React.memo(({uiConfig, auth, isSignedIn, netError}) => {\r\n    \r\n    const darkMode = useRecoilValue(darkModeAtom);\r\n    const darModeStyle = darkMode ? {\r\n        backgroundColor: 'rgba(60,60,60)'\r\n    } : {};\r\n\r\n  \r\n    return (\r\n        <Profiler id=\"--Profiler--\" onRender={() => console.log('Se renderizo un componente interno')}>\r\n        <div style={{...darModeStyle, justifyContent: 'center', alignItems: 'center', height: '100%', display: 'flex', flexDirection: 'column'}}>\r\n            \r\n            <Avatar src={logo} style={{width: 60, height: 60, marginTop: 24, boxShadow: '0 0px 5px rgb(154,48,154'}}/>\r\n            <Typography variant=\"h5\" style={{marginTop: 12}}>Shut-app</Typography>\r\n            {isSignedIn \r\n                ? netError \r\n                    ? <WifiOffIcon color=\"secondary\" style={{fontSize:\"3em\"}}/>\r\n                    : <CircularProgress color=\"secondary\" /> \r\n                : <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth}/>}\r\n\r\n        </div>\r\n        </Profiler>\r\n    );\r\n})\r\nexport default FirebaseAuthView;","import React, {useEffect, useState} from 'react';\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport FirebaseAuthView from './firebaseAuth.view';\r\nimport { loginData, firebaseCurrentUserState, firebaseCurrentTokenState } from '../../components/recoil/atoms';\r\nimport firebase from '../../utils/firebase';\r\nimport { Redirect } from 'react-router';\r\n\r\n\r\nconst uiConfig =  {\r\n    signInFlow: 'popup',\r\n    signInOptions: [\r\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n        firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n    ],\r\n    callbacks: {\r\n        // Avoid redirects after sign-in.\r\n        signInSuccessWithAuthResult: () => false\r\n    }\r\n};\r\n\r\nconst FirebaseAuthController = () => {\r\n\r\n    const  [userData, setLoginData] = useRecoilState(loginData)\r\n    const  setFirebaseCurrentUser = useSetRecoilState(firebaseCurrentUserState)\r\n    const  firebaseCurrentToken = useSetRecoilState(firebaseCurrentTokenState)\r\n\r\n    \r\n    const[isSignedIn, setSignedIn]= useState(false);\r\n    const[netError, setNetError]= useState(false);\r\n    \r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged(firebaseUser => {\r\n            setSignedIn(!!firebaseUser);\r\n            if(firebase.auth().currentUser){\r\n                const promise1 = firebase.auth().currentUser.getIdToken(true);\r\n                const promise2 = firebase.auth().currentUser.getIdTokenResult(true);\r\n\r\n                Promise.all([promise1, promise2])\r\n                    .then(([idToken, tokenResult]) => {\r\n                        firebaseCurrentToken(idToken);\r\n                        return tokenResult;\r\n                    })\r\n                    .then(result => {\r\n                        const data = result.claims;\r\n                        setFirebaseCurrentUser(data);\r\n                        const nameArray = (data.name) ? data.name.split(' ') : ['', ''];\r\n                        setLoginData({\r\n                            userId: data.user_id, \r\n                            nickname: data.name,\r\n                            firstName: nameArray[0],\r\n                            lastName: nameArray.filter((it, idx) => idx > 0).join(' '),\r\n                            email: data.email,\r\n                            gender: null\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        setNetError(true);\r\n                    });\r\n            }\r\n        });\r\n        \r\n    }, []);\r\n\r\n    if(!isSignedIn || !userData){\r\n        return <FirebaseAuthView \r\n            uiConfig={uiConfig} \r\n            auth={firebase.auth()} \r\n            isSignedIn={isSignedIn}\r\n            netError={netError}\r\n        />\r\n    }else{\r\n        return <Redirect to='/app' />\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default React.memo(FirebaseAuthController);","import React from 'react';\r\nimport FirebaseAuthController from './firebaseAuth.controller';\r\n\r\nconst FirebaseAuth = props => {\r\n\r\n    return <FirebaseAuthController />;\r\n\r\n}\r\nexport default FirebaseAuth;","import React from 'react';\r\nimport Tour from 'reactour';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport text from './idioma.json';\r\nimport {useRecoilState, useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {darkModeAtom, /*anchorElMenuBtn,*/ speedDialStateAtom, addContactViewOpenState} from '../../components/recoil/atoms';\r\nimport {focusStepAtom, tourAtom} from './tour.atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    helper: {\r\n        padding: '35px'\r\n    }\r\n}));\r\n\r\nconst AppReactTour = ({idioma}) => {\r\n\r\n    const classes = useStyle();\r\n    const [tourState, setTourState] = useRecoilState(tourAtom);\r\n    const darkModeState = useRecoilValue(darkModeAtom);\r\n    const [focusStep, setFocusStep] = useRecoilState(focusStepAtom);\r\n    //const setAnchorElMenuBtn = useSetRecoilState(anchorElMenuBtn);\r\n    const setSpeedDialState = useSetRecoilState(speedDialStateAtom);\r\n    const SetaddContactViewOpenState = useSetRecoilState(addContactViewOpenState);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n\r\n    const TOUR_STEPS = [\r\n        {\r\n            selector: \"\",\r\n            content: text.tourWelcome[idioma],\r\n        },{\r\n            selector: \"#idMainButton\",\r\n            content: text.tourSpeedDial[idioma],            \r\n            action: () => {\r\n                setSpeedDialState(true);\r\n            }\r\n        },\r\n        {\r\n            selector: \"#Mainspeeddialbutton-action-0\",\r\n            content: text.tourSpeedDialAdd[idioma]\r\n        },\r\n        {\r\n            selector: \"#idUsuarioEjemplo\",\r\n            content: text.tourAddWinUser[idioma],\r\n            position: 'top'\r\n        },\r\n        {\r\n            selector: \"#idAddUserIconButton\",\r\n            content: text.tourRequestFriendshipButton[idioma],\r\n            position: 'botton'\r\n        },\r\n        {\r\n            selector: \"#lista>li\",\r\n            content: text.tourFriend[idioma],\r\n            position: 'botton'\r\n        },\r\n        {\r\n            selector: \"#idIconInfoFriendStatus\",\r\n            content: text.tourFriendDetailStatus[idioma],\r\n            position: 'botton'\r\n        },\r\n        {\r\n            selector: \"#idIconFriendActions\",\r\n            content: text.tourFriendActions[idioma],\r\n            position: 'botton'\r\n        },\r\n        {\r\n            selector: \"#userAvatar\",\r\n            content: text.tourStepProfile[idioma],\r\n            stepInteraction: true,\r\n        },\r\n        /*{\r\n            selector: \"#cameraIconButton\",\r\n            content: text.tourStepProfileCamera[idioma]\r\n        },\r\n        {\r\n            selector: \"#idBtnLogout\",\r\n            content: text.tourStepProfileLogout[idioma]\r\n        },\r\n        {\r\n            selector: \"#profileMenuOptions\",\r\n            content: text.tourStepProfileMenuOptions[idioma]\r\n        },\r\n        {\r\n            selector: \"#profileOtherMenuOptions\",\r\n            content: text.tourStepOtherMenuOptions[idioma]\r\n        },*/\r\n        {\r\n            selector: \"\",\r\n            content: text.finalStep[idioma]\r\n        }\r\n    ]\r\n\r\n    const TOUR_STEPS_STYLED = TOUR_STEPS.map(step => ({...step, style:{\r\n            backgroundColor: darkModeState && \"#444\"\r\n        }}))\r\n    \r\n    const next = () => {\r\n        switch(focusStep){\r\n            case 2: {\r\n                \r\n                SetaddContactViewOpenState(true);\r\n                setTimeout(() => {\r\n                    setFocusStep(focusStep+1)\r\n                    setSpeedDialState(false);\r\n                }, 300);\r\n                break;\r\n            }\r\n            case 4: {\r\n                \r\n                friendDispatcher({action: 'add', payload: {friend: {\r\n                    email: 'user.email@mail.com',\r\n                    nickname: 'Nickname',\r\n                    gender: 'M',\r\n                    friendShipStatus: 2,\r\n                    friendShipStatusCode: 'REQUESTED',\r\n                    isTourTest: true,\r\n                    contactId: 'example_contact_id'\r\n                }}});\r\n                setTimeout(() => {\r\n                    SetaddContactViewOpenState(false);\r\n                    setFocusStep(focusStep+1)\r\n                }, 100);\r\n                break;\r\n            }\r\n            /*case 8: {\r\n                const target = document.getElementById('userAvatarButton');\r\n                setAnchorElMenuBtn(target);\r\n                setTimeout(() => setFocusStep(focusStep+1), 300);\r\n\r\n                break;\r\n            }\r\n            case 12:{\r\n                setAnchorElMenuBtn(null);\r\n                setFocusStep(focusStep+1);\r\n                break; \r\n            }*/\r\n            default: setFocusStep(focusStep+1); \r\n        }\r\n        \r\n    }\r\n    const prev = () => {\r\n        switch(focusStep){\r\n            case 1: {\r\n                setSpeedDialState(false);\r\n                setFocusStep(focusStep-1);\r\n                break;\r\n            }\r\n            case 3: {\r\n                setSpeedDialState(true);\r\n                SetaddContactViewOpenState(false);\r\n                setFocusStep(focusStep-1);\r\n                break;\r\n            }\r\n            case 5: {\r\n                friendDispatcher({action: 'delete', payload: {\r\n                    friendId: 'example_contact_id'\r\n                }});\r\n                SetaddContactViewOpenState(true);\r\n                setTimeout(() => setFocusStep(focusStep-1), 300);\r\n                break;\r\n            }\r\n            /*case 9: {\r\n                setAnchorElMenuBtn(null);\r\n                setFocusStep(focusStep-1);\r\n                break;\r\n            }  */          \r\n            default: setFocusStep(focusStep-1); \r\n        }\r\n        \r\n    }\r\n\r\n    const beforeClose = () => {\r\n        //setAnchorElMenuBtn(null);\r\n        friendDispatcher({action: 'delete', payload: {\r\n            friendId: 'example_contact_id'\r\n        }});\r\n        setSpeedDialState(false);\r\n    };\r\n\r\n    \r\n    return (\r\n        <>\r\n            <Tour\r\n                steps={TOUR_STEPS_STYLED}\r\n                isOpen={tourState}\r\n                onRequestClose={() => setTourState(false)} \r\n                badgeContent={(curr, tot) => `${curr} ${text.of[idioma]} ${tot}`}\r\n                accentColor='salmon'\r\n                closeWithMask={false}\r\n                disableInteraction\r\n                rounded={10} \r\n                maskSpace={5}\r\n                showNavigation={false}\r\n                goToStep={focusStep}\r\n                nextStep={next}\r\n                prevStep={prev}\r\n                onBeforeClose={beforeClose}                 \r\n                className={classes.helper}\r\n            />\r\n        </>\r\n      )\r\n}\r\n//export default React.memo(AppTourView);\r\nexport default React.memo(AppReactTour);","import React, {Suspense} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\n// Recoil Atoms\r\nimport {subscribeToEventsState, activeChatWith, darkModeAtom, idiomaState} from './components/recoil/atoms';\r\n\r\n// React router\r\nimport {Switch, Route} from 'react-router-dom';\r\n\r\n// Materia UI\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {SnackbarProvider} from 'notistack';\r\n\r\n// Componentes visuales\r\n//import Signin from './view/signin';\r\nimport MainContainter from './view/main';\r\nimport UiComponents from './components/uiComponents';\r\n\r\nimport FirebaseAuth from './view/firebaseAuth';\r\nimport AppTour from './view/tour/tour.view';\r\n\r\nconst AsyncToolbar = React.lazy(() => import('./view/toolbar'));\r\nconst AsyncMainButton = React.lazy(() => import('./view/mainButton'));\r\nconst AsyncContactList = React.lazy(() => import('./view/contacts'));\r\nconst AsyncChatCmp = React.lazy(() => import('./view/chat'));\r\nconst AsyncEvents = React.lazy(() => import('./components/events'));\r\n\r\nconst themeDark = createMuiTheme({palette: {type: 'dark',}});\r\nconst themeDefault = createMuiTheme({});\r\n\r\n\r\nconst BodyApp = React.memo(() => {\r\n    console.log('BODY APP');\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const dark = useRecoilValue(darkModeAtom);\r\n    const chatWith = useRecoilValue(activeChatWith);\r\n\r\n    const view = chatWith \r\n        ? \r\n            <AsyncChatCmp />\r\n        \r\n        : <>\r\n            <ThemeProvider theme={dark ? themeDark : themeDefault}>  \r\n                <AsyncToolbar />\r\n                <AsyncContactList />\r\n                <AsyncMainButton />\r\n                <AppTour idioma={idioma}/>\r\n            </ThemeProvider>\r\n        </>\r\n\r\n    return view; \r\n})\r\n\r\nconst EntryPointView = React.memo(() => {\r\n\r\n    const view =  <Switch>\r\n            <Route path=\"/app\" exact component={BodyApp} />\r\n            <Route path=\"/\" exact component={FirebaseAuth} />\r\n        </Switch>\r\n\r\n    return view;\r\n})\r\n\r\nconst App = () => {\r\n\r\n    const dark = useRecoilValue(darkModeAtom);\r\n    \r\n    const subscribe = useRecoilValue(subscribeToEventsState);\r\n    const notistackRef = React.createRef();\r\n    const onClickDismiss = React.useCallback(key => {\r\n        return () => {notistackRef.current.closeSnackbar(key)}\r\n    }, [notistackRef])\r\n    \r\n  \r\n\r\n    return (\r\n        <Suspense fallback={\r\n            <Backdrop style={{zIndex: 999999, color: '#fff'}} open={true} >\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>}\r\n        >\r\n        <ThemeProvider theme={dark ? themeDark : themeDefault}>       \r\n            <MainContainter>\r\n                <CssBaseline />\r\n                <UiComponents />\r\n                <SnackbarProvider \r\n                    maxSnack={3} \r\n                    autoHideDuration={3000}\r\n                    preventDuplicate\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    ref={notistackRef}\r\n                    action={(key) => (\r\n                        <IconButton onClick={onClickDismiss(key)}>\r\n                            <CloseIcon fontSize=\"small\" style={{color: 'white'}} />\r\n                        </IconButton>\r\n                    )}\r\n                >\r\n                    <EntryPointView />\r\n                    {subscribe && <AsyncEvents />}\r\n\r\n                </SnackbarProvider>\r\n            </MainContainter>\r\n        </ThemeProvider>\r\n    </Suspense>   \r\n     \r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {RecoilRoot} from 'recoil';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n//import 'typeface-roboto';\r\n//import 'fontsource-roboto';\r\n//import \"fontsource-roboto/300.css\"\r\n//import \"fontsource-roboto/400.css\"\r\n//import \"fontsource-roboto/500.css\"\r\n//import \"fontsource-roboto/700.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>      \r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\nserviceWorker.register();\r\n","\r\nconst firebaseConfig = () => {\r\n    if(process.env.NODE_ENV === 'development'){\r\n        return require('./secrets').firebaseConfig;\r\n    }else if(process.env.NODE_ENV === 'production'){\r\n       return {\r\n        apiKey: process.env.FIREBSAE_API_KEY,\r\n        authDomain: \"shut-up-pro.firebaseapp.com\",\r\n        databaseURL: \"https://shut-up-pro.firebaseio.com\",\r\n        projectId: \"shut-up-pro\",\r\n        storageBucket: \"shut-up-pro.appspot.com\",\r\n        messagingSenderId: \"1034880989728\",\r\n        appId: \"1:1034880989728:web:574d602e7540573753da45\"\r\n      }\r\n    }\r\n}\r\n\r\nexport default firebaseConfig();\r\n","import * as firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport firebaseConfig from '../conf/firebaseConf';\r\n\r\nconsole.log(firebaseConfig);\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase;\r\n","import {atom} from 'recoil';\r\n\r\nconst tourAtom = atom({\r\n    key: 'tourAtom',\r\n    'default': false\r\n}); \r\n\r\nconst focusStepAtom = atom({\r\n    key: 'focusStepAtom',\r\n    default: 0\r\n});\r\n\r\nexport {\r\n    focusStepAtom, tourAtom\r\n}","import {atom} from 'recoil';\r\n\r\nconst getDefaultLanguage= () => {\r\n    let idioma = 'en';\r\n    var userLang = navigator.language || navigator.userLanguage;\r\n    if(/^(es-).+/.test(userLang)){\r\n        idioma = 'es';\r\n    }\r\n    return idioma;\r\n}\r\n\r\nconst idiomaState = atom({\r\n    key: 'idiomaState',\r\n    default: getDefaultLanguage()\r\n});\r\n\r\nconst loginData = atom({\r\n    key: 'loginData',\r\n    default: null\r\n});\r\nconst userAvatarState = atom({\r\n    key: 'userAvatarState',\r\n    default: null\r\n});\r\nconst newAvatarState = atom({\r\n    key: 'newAvatarState',\r\n    default: null\r\n});\r\n\r\n\r\n\r\nconst chatConversation = atom({\r\n    key: 'chatConversation',\r\n    default: {\r\n        'active': false\r\n    }\r\n});\r\n\r\nconst contactListState = atom({\r\n    key: 'contactListState',\r\n    default: []\r\n});\r\n\r\n\r\nconst view = {\r\n    posibleViews: {\r\n        LOGIN: 'LOGIN',\r\n        CONTACTS: 'CONTACTS',\r\n        CHAT: 'CHAT'\r\n    },\r\n    getAtom: atom({\r\n        key: 'view',\r\n        default: 'LOGIN'\r\n    })\r\n};\r\n\r\nconst backdropState = atom({\r\n    key: 'backdropState',\r\n    default: false\r\n});\r\n\r\nconst subscribeToEventsState = atom({\r\n    key: 'subscribeToEventsState',\r\n    default: false\r\n})\r\n\r\nconst addContactViewOpenState = atom({\r\n    key: 'addContactViewOpenState',\r\n    default: false\r\n});\r\n\r\nconst friendsAtom = atom({\r\n    key: 'friendsAtom',\r\n    default: []\r\n});\r\n\r\nconst activeChatWith = atom({\r\n    key: 'activeChatWith',\r\n    default: null\r\n});\r\n\r\nlet conversations = {};\r\nconst eraseConversationsWithContacts = () => {\r\n    conversations = {};\r\n}\r\nconst getConversationWithContact = contactId => {\r\n    if(conversations[contactId]){\r\n        return conversations[contactId];\r\n    }\r\n    \r\n    const atomStore = atom({\r\n        key: `conversationWith_${contactId}`,\r\n        default: []\r\n    });\r\n    conversations[contactId] = atomStore;\r\n    return atomStore;\r\n}\r\n\r\n\r\n\r\nconst messagesAtom = atom({\r\n    key: 'messagesAtom',\r\n    default: null\r\n});\r\n\r\nconst tokenTimeoutAtom = atom({\r\n    key: 'tokenTimeoutAtom',\r\n    default: {\r\n        tokentimeout: 0\r\n    }\r\n});\r\n\r\nconst darkModeAtom = atom({\r\n    key: 'themeAtom',\r\n    default: localStorage.getItem('darkMode') === 'true' ? true : false\r\n});\r\n\r\nconst firebaseCurrentUserState = atom({\r\n    key: 'firebaseCurrentUser',\r\n    'default': null\r\n});\r\nconst firebaseCurrentTokenState = atom({\r\n    key: 'firebaseCurrentTokenState',\r\n    'default': null\r\n});\r\n/*\r\nconst anchorElMenuBtn = atom({\r\n    key: 'anchorElMenuBtn',\r\n    'default': null\r\n});*/\r\n\r\n\r\nconst speedDialStateAtom = atom({\r\n    key: 'speedDialStateAtom',\r\n    'default': false\r\n});\r\n\r\n\r\n\r\n\r\n\r\nexport {idiomaState, loginData, chatConversation, view, contactListState, subscribeToEventsState, \r\n    backdropState, userAvatarState, newAvatarState,addContactViewOpenState,\r\n    friendsAtom, \r\n    activeChatWith, messagesAtom, getConversationWithContact, tokenTimeoutAtom, darkModeAtom, firebaseCurrentUserState, firebaseCurrentTokenState, \r\n    /*anchorElMenuBtn,*/ speedDialStateAtom, eraseConversationsWithContacts\r\n};","import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, getConversationWithContact, activeChatWith} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    if(f1.isTourTest) return -1 // Para que al agregar un usuario a partir del ejemplo del tour, aparezca de primero\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    if(fIndex < 0){\r\n                        friends.push(payload.friend);\r\n                        return friends;\r\n                    }else{\r\n                        const updatedFriend = {...oldFriends[fIndex], ...payload.friend};\r\n                        return oldFriends.slice(0, fIndex)\r\n                            .concat([updatedFriend])\r\n                            .concat(oldFriends.slice(fIndex+1));\r\n                    }\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                const activeChatContactId = get(activeChatWith);\r\n                if(activeChatContactId === payload.friendId){\r\n                    set(activeChatWith, oldActive => {\r\n                        return null;\r\n                    });\r\n                }\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    let isUpdated = false;\r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            if(socketId !== oldFriends[fIndex].socketId){\r\n                                const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                                const friends = oldFriends.slice(0, fIndex)\r\n                                                        .concat([updatedFriend])\r\n                                                        .concat(oldFriends.slice(fIndex+1));\r\n                                isUpdated = true;\r\n                                return friends;\r\n                            }\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1 && isUpdated){\r\n                        if(payload.notification)\r\n                            payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                        else if(payload.OSNotification){\r\n                            payload.OSNotification(conectedFriendName, payload.msg[get(idiomaState)]);\r\n                        }\r\n\r\n                    }\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                    \r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","module.exports = __webpack_public_path__ + \"static/media/logo192-removebg-preview.551636c3.png\";","import {atom} from 'recoil';\r\n\r\nconst notificationAtom = atom({\r\n    key: \"notificationAtom\",\r\n    default: {\r\n        open: false,\r\n        autoHideDuration: 6000,\r\n        severity: 'success',\r\n        msg: \"\"\r\n    }\r\n});\r\n\r\nexport {notificationAtom};"],"sourceRoot":""}