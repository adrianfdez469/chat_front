{"version":3,"sources":["utils/socket.js","utils/axiosHook.js","components/uiComponents/notification/notification.hook.js","conf/configuration.js","utils/useLogout.js","view/mainButton/mainButton.view.js","view/addContact/addContact.view.js","view/addContact/addContact.controller.js","view/addContact/index.js","view/mainButton/mainButton.controller.js","view/mainButton/index.js"],"names":["socket","socketClient","getSocket","openSocket","DEFAULT_CONFIG","server","close","text","errConn","es","en","getTokenIdError","useAxiosHook","useNotificationHook","openErrorNotification","openSuccessNotification","idioma","useRecoilValue","idiomaState","firebaseCurrentToken","firebaseCurrentTokenState","logout","useLogout","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","getAxiosRequest","idToken","axios","post","headers","then","resp","catch","err","response","console","log","firebase","auth","currentUser","getIdToken","NotificationHook","useRecoilState","notificationAtom","notificationState","setNotificationState","defaultToOpem","open","autoHideDuration","openSpecificNotification","severity","msg","openNotification","properties","openInfoNotification","openWarningNotification","setLoginData","useSetRecoilState","loginData","setUserAvatar","userAvatarState","setContactList","contactListState","setFriends","friendsAtom","client","setView","view","getAtom","useCallback","eraseConversationsWithContacts","emit","signOut","posibleViews","LOGIN","useStyles","makeStyles","theme","speedDial","position","bottom","spacing","right","speedDialDiv","width","height","icon","color","palette","secondary","React","memo","handleOpen","handleClose","openAddContactView","classes","id","className","SpeedDial","ariaLabel","SpeedDialIcon","onClose","onOpen","SpeedDialAction","key","tooltipTitle","addContact","tooltipOpen","onClick","sendAll","alert","dialogContent","padding","search","borderRadius","shape","backgroundColor","fade","common","white","marginLeft","searchIcon","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","UserItem","user","sendFriendRequest","ListItem","email","ListItemAvatar","Avatar","src","avatarUrl","ListItemText","primary","nickname","ListItemSecondaryAction","IconButton","blockinguser","grey","blue","userId","disabled","InputSearch","buscarUsuarios","inputSearchRef","useState","searchState","setSearchState","InputBase","onKeyPress","event","charCode","placeholder","root","input","inputProps","value","onChange","target","inputRef","endAdornment","InputAdornment","size","aria-label","AddContactView","closeAddContactWin","users","Dialog","maxWidth","onEntering","aria-labelledby","DialogTitle","dialogTitle","title","Divider","DialogContent","dividers","List","style","minHeight","map","DialogActions","Button","autoFocus","AddContactController","props","addContactViewOpenState","addContactState","setAddContactState","setUsers","useRef","userData","tourState","tourAtom","friendDispatcher","friendSelector","stringPattern","current","start","limit","status","data","lbErrorLoadingUsers","useEffect","token","filter","action","payload","friend","userIdRequester","userIdRequested","lbErrorSendigFriendRequest","AddContact","speedDialStateAtom","setOpen","addContactViewState","setAddContactViewState","MainButton"],"mappings":"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","file":"static/js/12.c4f74ce6.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    },\r\n    close: () => {\r\n        socket.close();\r\n    }\r\n};\r\n\r\nexport default socketClient;","//import React from 'react';\r\nimport axios from 'axios';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nimport {idiomaState, firebaseCurrentTokenState} from '../components/recoil/atoms';\r\nimport firebase from './firebase';\r\nimport useLogout from './useLogout';\r\n\r\nconst text = {\r\n    errConn: {\r\n        es: \"Error de conexión\",\r\n        en: \"Network error\"\r\n    },\r\n    getTokenIdError: {\r\n        es: \"Su sesión ha expirado\",\r\n        en: \"Expired session\"\r\n    }\r\n}\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const logout = useLogout();\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const getAxiosRequest = idToken => axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n            bodyParams, \r\n            {\r\n                headers: {\r\n                    'Authorization': idToken\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                if(doFnAfterSuccess) doFnAfterSuccess(resp, idToken);\r\n                return resp;\r\n            })\r\n            .catch(err => {\r\n                if(!err.response){\r\n                    openErrorNotification(text.errConn[idioma]);                       \r\n                }else if(messageOnError) openErrorNotification(messageOnError);\r\n\r\n                if(doFnAfterError) doFnAfterError(err);\r\n                return err;\r\n            })\r\n    \r\n\r\n        if(firebaseCurrentToken){\r\n            return getAxiosRequest(firebaseCurrentToken)\r\n                .catch(err => {\r\n                    console.log('Error al realizar la peticion con el token guardado en recoil state, asi que intentamos usando firebase');\r\n                    return firebase.auth().currentUser.getIdToken(true)\r\n                        .then(idToken => {\r\n                            return getAxiosRequest(idToken);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log('Error al realizar la peticion con el token proveniente de firebase');\r\n                            logout();\r\n                            return err;\r\n                        });\r\n                })\r\n        }\r\n    };   \r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import {useRecoilState} from 'recoil'\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\nconst NotificationHook = () => {\r\n    \r\n    const [notificationState, setNotificationState] = useRecoilState(notificationAtom);\r\n\r\n    const defaultToOpem = {\r\n        ...notificationState,\r\n        open: true,\r\n        autoHideDuration: 3000\r\n    };\r\n\r\n    const openNotification = properties => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    const openSpecificNotification = (severity, msg) => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            severity: severity,\r\n            msg: msg\r\n        });\r\n    }\r\n\r\n    const openSuccessNotification = msg => {\r\n        openSpecificNotification(\"success\",msg);\r\n    }\r\n\r\n    const openWarningNotification = msg => {\r\n        openSpecificNotification(\"warning\",msg);\r\n    }\r\n\r\n    const openErrorNotification = msg => {\r\n        openSpecificNotification(\"error\",msg);\r\n    }\r\n\r\n    const openInfoNotification = msg => {\r\n        openSpecificNotification(\"info\",msg);\r\n    }\r\n\r\n    return {    \r\n        openNotification: openNotification,\r\n        openSuccessNotification: openSuccessNotification,\r\n        openErrorNotification: openErrorNotification,\r\n        openInfoNotification: openInfoNotification,\r\n        openWarningNotification: openWarningNotification\r\n    };\r\n\r\n}\r\nexport default NotificationHook;","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    //server: location.origin\r\n    server: \"https://shut-app-pro.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import {useSetRecoilState} from 'recoil';\r\nimport {loginData, userAvatarState, contactListState, friendsAtom, eraseConversationsWithContacts, view} from '../components/recoil/atoms';\r\nimport { useCallback } from 'react';\r\nimport socketClient from './socket';\r\nimport firebase from './firebase';\r\nconst useLogout = () => {\r\n\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setUserAvatar = useSetRecoilState(userAvatarState);\r\n    const setContactList = useSetRecoilState(contactListState);\r\n    const setFriends = useSetRecoilState(friendsAtom);\r\n    const client = socketClient.getSocket();\r\n    const setView = useSetRecoilState(view.getAtom);\r\n\r\n    return useCallback(() => {\r\n        eraseConversationsWithContacts();\r\n        setUserAvatar(null);\r\n        setContactList([]);\r\n        setFriends([]);\r\n        client.emit('logout', {});\r\n        socketClient.close();\r\n        setLoginData(null);\r\n        firebase.auth().signOut();\r\n        setView(view.posibleViews.LOGIN);\r\n    }, []);\r\n}\r\nexport default useLogout;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\n//import ShareIcon from '@material-ui/icons/Share';\r\n//import MessageIcon from '@material-ui/icons/Message';\r\n//import GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    speedDial: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(0),\r\n      right: theme.spacing(0),\r\n    },\r\n    speedDialDiv: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n      width: theme.spacing(7), \r\n      height: theme.spacing(7)\r\n    },\r\n    icon: {\r\n        color: theme.palette.text.secondary\r\n    }\r\n  }));\r\n\r\nconst MainButtonView = ({idioma, handleOpen, handleClose, open, openAddContactView, text}) => {\r\n\r\n    const classes = useStyles();\r\n  \r\n    \r\n    return (\r\n      <div id=\"idMainButton\" className={classes.speedDialDiv} >\r\n        <SpeedDial\r\n            ariaLabel=\"Main speed dial button\"\r\n            className={classes.speedDial}            \r\n            icon={<SpeedDialIcon />}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            open={open}\r\n        >\r\n        \r\n          <SpeedDialAction\r\n            //id=\"idBtnAddContact\"\r\n            key='add'\r\n            icon={<PersonAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addContact[idioma]}\r\n            tooltipOpen\r\n            onClick={openAddContactView}\r\n          />\r\n          <SpeedDialAction\r\n            key='addgroup'\r\n            icon={<CallSplitIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendAll[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje de difusion');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          {/*<SpeedDialAction\r\n            key='addgroup'\r\n            icon={<GroupAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addGroup[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Crear un grupo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='send'\r\n            icon={<MessageIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje a un contacto que no esta en tu lista de contacto');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='share'\r\n            icon={<ShareIcon className={classes.icon}/>}\r\n            tooltipTitle={text.shareMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Compartir la aplicacion por correo electronivo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />*/}\r\n        </SpeedDial>\r\n      </div>\r\n    );\r\n\r\n}\r\nexport default React.memo(MainButtonView);","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { blue, grey } from '@material-ui/core/colors';\r\n\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport text from './idioma.json';\r\nimport { ListItemSecondaryAction } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    /*avatar: {\r\n      backgroundColor: blue[100],\r\n      color: blue[600],\r\n    },*/\r\n    dialogContent: {\r\n      padding: 0\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },*/\r\n      },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n            width: '20ch',\r\n            },\r\n        },*/\r\n    }\r\n  }));\r\n\r\nconst AddContactView = ({idioma, closeAddContactWin, open,\r\n    buscarUsuarios, users,\r\n    inputSearchRef,\r\n    sendFriendRequest\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Dialog\r\n            id=\"idWinAddContact\"\r\n            maxWidth=\"xs\"\r\n            onEntering={() => {}}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={open}\r\n            onClose={closeAddContactWin}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\" className={classes.dialogTitle}>{text.title[idioma]} </DialogTitle>\r\n            <Divider />\r\n            <InputSearch idioma={idioma} buscarUsuarios={buscarUsuarios} inputSearchRef={inputSearchRef}/>\r\n            <DialogContent dividers className={classes.dialogContent}>\r\n                <List style={{minHeight:'200px'}}>\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <UserItem user={user} sendFriendRequest={sendFriendRequest}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={closeAddContactWin} color=\"primary\">\r\n                    {text.close[idioma]}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n}\r\n\r\nconst UserItem = ({user, sendFriendRequest}) => {\r\n\r\n    \r\n    const disableItem = () => {\r\n        sendFriendRequest(user.userId);\r\n\r\n    }\r\n\r\n    return (\r\n        <ListItem key={user.email} id={user.id && user.id}>\r\n            <ListItemAvatar>\r\n                <Avatar \r\n                    src={user.avatarUrl}\r\n                />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user.nickname}\r\n                secondary={user.email}\r\n            />\r\n            \r\n                <ListItemSecondaryAction>\r\n                    <IconButton color={user.blockinguser ? grey[100] : blue[300]} onClick={disableItem} disabled={user.blockinguser}>\r\n                        <AddIcon id=\"idAddUserIconButton\" color={user.blockinguser ? 'disabled' : \"primary\"}/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n    )\r\n\r\n}\r\n\r\nconst InputSearch = ({idioma, buscarUsuarios, inputSearchRef}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [searchState, setSearchState] = React.useState('');\r\n\r\n    const onChangeSearch = ({target: {value}}) => {\r\n        setSearchState(value);\r\n    }\r\n    const clearSearch = () => {\r\n        setSearchState('');\r\n    }\r\n    const keyPressHandler = (event) => {\r\n        if(event.charCode === 13){\r\n            buscarUsuarios();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    onKeyPress={keyPressHandler}\r\n                    placeholder={text.search[idioma]}\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    value={searchState}\r\n                    onChange={onChangeSearch}\r\n                    inputRef={inputSearchRef}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            {searchState !== '' ?\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={clearSearch}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            : null}\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={buscarUsuarios}\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment> \r\n                        \r\n                    }\r\n                />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AddContactView;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport AddContactView from './addContact.view';\r\nimport text from './idioma.json';\r\nimport {addContactViewOpenState, loginData/*, friendSelector*/} from '../../components/recoil/atoms';\r\nimport {tourAtom} from '../tour/tour.atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\n\r\nimport {idiomaState} from '../../components/recoil/atoms'\r\nimport socketClient from '../../utils/socket';\r\n\r\nconst AddContactController = props => {\r\n    const idioma = useRecoilValue(idiomaState); \r\n    const [addContactState, setAddContactState] = useRecoilState(addContactViewOpenState);\r\n    const [users, setUsers] = useState([]);\r\n    const inputSearchRef = useRef({value: ''});\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    const tourState = useRecoilValue(tourAtom);\r\n\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n\r\n    const buscarUsuarios = () => {\r\n        if(tourState){\r\n            setUsers([{\r\n                email: 'user.email@mail.com',\r\n                nickname: 'Nickname',\r\n                id: 'idUsuarioEjemplo'\r\n            }]);\r\n        }else{\r\n            postRequest({\r\n                url: '/users/searchContact',\r\n                bodyParams: {\r\n                    stringPattern: inputSearchRef.current.value,\r\n                    start: 0,\r\n                    limit: 20\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        setUsers(resp.data.users);\r\n                    }\r\n                },\r\n                messageOnError: text.lbErrorLoadingUsers[idioma]\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        buscarUsuarios();\r\n    }, [])\r\n\r\n    const sendFriendRequest = (userId) => {\r\n        \r\n        postRequest({\r\n            url: '/users/sendFriendRequest',\r\n            bodyParams: {\r\n                userId: userId\r\n            },\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    setUsers(users => {\r\n                        return users.filter(user => user.userId !== userId);\r\n                    });\r\n\r\n                    //addContact(resp.data.friend);\r\n                    friendDispatcher({action: 'add', payload: {friend: resp.data.friend}});\r\n                    const client = socketClient.getSocket();\r\n                    client.emit('request friendship', {\r\n                        userIdRequester: userData.userId,\r\n                        userIdRequested: userId,\r\n                        token: token\r\n                    });\r\n                }\r\n            },\r\n            messageOnError: text.lbErrorSendigFriendRequest[idioma]\r\n        });\r\n        \r\n    }\r\n\r\n    const closeAddContactWin = () => {\r\n        setAddContactState(false);\r\n    }\r\n\r\n    return <AddContactView \r\n        idioma={idioma}\r\n        closeAddContactWin={closeAddContactWin}\r\n        open={addContactState}\r\n\r\n        users={users}\r\n        buscarUsuarios={buscarUsuarios}\r\n\r\n        inputSearchRef={inputSearchRef} \r\n        sendFriendRequest={sendFriendRequest}\r\n    />;\r\n\r\n}\r\nexport default AddContactController;","import React from 'react';\r\nimport AddContactController from './addContact.controller';\r\n\r\nconst AddContact = props => {\r\n\r\n    return <AddContactController />;\r\n\r\n}\r\n\r\nexport default AddContact;","import React from 'react';\r\n\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\n//import JoyRide from 'react-joyride';\r\nimport MainButtonView from './mainButton.view';\r\nimport AddContact from '../addContact';\r\nimport {idiomaState, addContactViewOpenState, speedDialStateAtom} from '../../components/recoil/atoms';\r\nimport text from './idioma.json'\r\n\r\n\r\nconst MainButtonController = props => {\r\n\r\n    //const [open, setOpen] = useState(false);\r\n    const [open, setOpen] = useRecoilState(speedDialStateAtom);\r\n\r\n    const [addContactViewState,setAddContactViewState] = useRecoilState(addContactViewOpenState);\r\n    \r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    const openAddContactView = () => {\r\n        setAddContactViewState(true);\r\n    }\r\n\r\n    return <>\r\n        <MainButtonView \r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            idioma={idioma}\r\n            text={text}\r\n            openAddContactView={openAddContactView}\r\n        />\r\n\r\n        \r\n        {addContactViewState ? <AddContact /> : null}\r\n        \r\n    </>;\r\n\r\n}\r\nexport default React.memo(MainButtonController);","import React from 'react';\r\nimport MainButtonController from './mainButton.controller';\r\nconst MainButton = props => {\r\n\r\n    return <MainButtonController />;\r\n\r\n}\r\nexport default MainButton;"],"sourceRoot":""}