{"version":3,"sources":["utils/socket.js","utils/axiosHook.js","components/uiComponents/notification/notification.hook.js","utils/OS_NotificationPermission.js","conf/configuration.js","utils/useLogout.js","utils/browserVisibility.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/recibedMessageSubscriber.js","components/events/savedMessageSubscriber.js","components/events/readedMessageSubscriber.js","components/events/blokedContactSubscriber.js","components/events/index.js","../node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","../node_modules/@material-ui/icons/HowToReg.js","../node_modules/@material-ui/icons/ThumbDownAlt.js","../node_modules/@material-ui/icons/Delete.js","../node_modules/@material-ui/icons/VoiceOverOff.js","../node_modules/@material-ui/icons/Info.js","view/contacts/contact/acceptInvAction/acceptinv.view.js","view/contacts/contact/acceptInvAction/acceptInv.controller.js","view/contacts/contact/acceptInvAction/index.js","view/contacts/contact/declineInvAction/declineinv.view.js","view/contacts/contact/declineInvAction/declineInv.controller.js","view/contacts/contact/declineInvAction/index.js","view/contacts/contact/deleteAction/delete.view.js","view/contacts/contact/deleteAction/delete.controller.js","view/contacts/contact/deleteAction/index.js","view/contacts/contact/blockAction/block.view.js","view/contacts/contact/blockAction/block.controller.js","view/contacts/contact/blockAction/index.js","view/contacts/contact/contactAction.proxy.js","view/contacts/contact/contact.view.js","view/contacts/contact/contact.controller.js","view/contacts/contact/index.js","view/contacts/contacs.view.js","view/contacts/contacts.controller.js","view/contacts/index.js"],"names":["socket","socketClient","getSocket","openSocket","DEFAULT_CONFIG","server","close","text","errConn","es","en","getTokenIdError","useAxiosHook","useNotificationHook","openErrorNotification","openSuccessNotification","idioma","useRecoilValue","idiomaState","firebaseCurrentToken","firebaseCurrentTokenState","logout","useLogout","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","getAxiosRequest","idToken","axios","post","headers","then","resp","catch","err","response","console","log","firebase","auth","currentUser","getIdToken","NotificationHook","useRecoilState","notificationAtom","notificationState","setNotificationState","defaultToOpem","open","autoHideDuration","openSpecificNotification","severity","msg","openNotification","properties","openInfoNotification","openWarningNotification","allowPermission","localStorage","removeItem","askNotificationPermission","callback","handlePermission","permission","Notification","window","requestPermission","e","checkNotificationPromise","permissionType","denyPermission","setItem","allowedNotifications","getItem","setLoginData","useSetRecoilState","loginData","setUserAvatar","userAvatarState","setContactList","contactListState","setFriends","friendsAtom","client","setView","view","getAtom","useCallback","eraseConversationsWithContacts","emit","signOut","posibleViews","LOGIN","hidden","visibilityChange","document","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","handleVisibilityChange","useEffect","addEventListener","undefined","useNewUserSubscriber","props","friendDispatcher","friendSelector","userData","enqueueSnackbar","useSnackbar","isBrowserVisble","useBrowserVisibility","subscribeNewUser","on","data","payload","connected","OS_Notification","OSNotification","nickname","content","body","icon","logo","notification","action","userId","unsSubscribeNewUser","off","useDisconnectSubscriber","subscribeDisconnect","socketId","disconnected","unSubscribeDisconnect","useRequestFriendSubscriber","useNotifications","subscribeRequestFriend","userIdRequester","userIdRequested","socketIdRequester","friendId","status","friend","requestedInv","variant","errorLoadingFriends","connError","unSubscribeRequestFriend","useAcceptedFriendshipSubscriber","subscribeAcceptedFriendship","accepterId","socketIdAccepter","accept","unSubscribeAcceptedFriendship","useDeclinedFriendship","useAxios","subscribeDeclinedFriendship","declinerId","socketIdDecliner","declinedId","socketIdDeclined","declinedInv","unSubscribeDeclinedFriendship","useDeleteContatctSubscriber","subscribeDeleteContatct","deleterId","socketIdDeleter","delete","unSubscribeDeleteContatct","stackFns","useRecibedMessageSubscriber","addMsgToConversation","addMsgToConversationSelector","activeChatContactId","activeChatWith","friends","putInQueque","React","fn","push","reverse","forEach","subscribeRecibedMessage","unSubscribeRecibedMessage","userOriginId","messageId","socketIdSender","datetime","length","contact","find","f","contactId","writingYou","dataObj","cantidad","lastMessage","notifyTo","token","state","useSavedMessageSubscriber","editMsgToStateSaved","editMsgToStateSavedSelector","subscribeSavedMessage","consecutive","soketIdContact","unSubscribeSavedMessage","useReadedMessageSubscriber","editAllMsgToReaded","editAllMsgToReadedSelector","subscribeReadedMessage","unSubscribeReadedMessage","useBlokedContactSubscriber","subscribeBlokedContact","blokerId","socketIdBloked","block","unSubscribeBlokedContact","useEvents","useUserDisconnectSubscriber","useAcceptFriendshipSubscriber","useDeclinedFriendshipSubscriber","useDeletedContactSubscriber","subscribeAll","unSubscribeAll","ListItemAvatar","ref","classes","className","other","_objectWithoutProperties","context","ListContext","_extends","clsx","root","alignItems","alignItemsFlexStart","withStyles","minWidth","flexShrink","marginTop","name","ListItemSecondaryAction","muiName","position","right","top","transform","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","fillRule","d","AcceptInvActionView","onClick","MenuItem","ListItemIcon","fontSize","color","ListItemText","primary","acceptInv","AcceptInvActionController","preAction","acceptedUserId","errorAccepting","AcceptInv","DeclineInvActionView","decline","DeclineInvActionController","declinedUserId","errorDeclining","DeclineInv","DeleteActionView","DeleteActionController","deletedUserId","onDeleteError","friendShipStatus","socketIdDeleted","DeleteAction","BlockActionView","BlockActionController","blokedUserId","onBlockError","BlockAction","ContactActionProxy","handleClose","useStyle","makeStyles","theme","infoIcon","marginRight","overflow","textAlign","flex","padding","transition","borderRadius","border","cursor","margin","display","outline","userSelect","verticalAlign","justifyContent","textDecoration","listItemText","paddingRight","spacing","primaryText","palette","secondaryText","secondary","OnlineStyledBadge","badge","backgroundColor","boxShadow","left","width","height","animation","opacity","Badge","OfflineStyledBadge","grey","OnlineBadge","overlap","anchorOrigin","vertical","horizontal","children","StyledMenu","paper","Menu","elevation","getContentAnchorEl","transformOrigin","useCustomTooltipGreenStyle","arrow","green","tooltip","useCustomTooltipRedStyle","red","CustomTooltip","classesRed","classesGreen","Tooltip","ContactView","memo","handleMenu","anchorEl","openChat","lastMsg","options","locale","lastMsgTime","formatRelative","Date","avatarUrl","ListItem","button","unread","badgeContent","Avatar","src","friendShipStatusCode","slice","secondaryTypographyProps","style","title","id","IconButton","edge","aria-label","keepMounted","Boolean","onClose","Divider","component","ContactContrller","setAnchorEl","setActiveChat","event","currentTarget","Contact","useStyles","scroll","flexGrow","flexDirection","overflowY","offsetDown","mixins","toolbar","bottom","ContactsView","contacts","List","map","key","Typography","align","goMakeFriends","beta","UpdateAvatarCmp","lazy","ContactsController","dark","darkModeAtom","setUserAvatarState","setNewUserAvatarState","newAvatarState","setTourState","tourAtom","loguot","setIdiomaState","openUpdateAvatar","setOpenUpdateAvatar","language","userResp","user","_id","firstName","lastName","email","avatarChanged","oauthAvatarUrl","friendsPromise","friendsResp","friendsDataPromise","Promise","all","friendsDataResp","contactsData","loadData","isDark","Dialog","fallback","Contacts"],"mappings":"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","file":"static/js/9.c8960d43.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    },\r\n    close: () => {\r\n        socket.close();\r\n    }\r\n};\r\n\r\nexport default socketClient;","//import React from 'react';\r\nimport axios from 'axios';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nimport {idiomaState, firebaseCurrentTokenState} from '../components/recoil/atoms';\r\nimport firebase from './firebase';\r\nimport useLogout from './useLogout';\r\n\r\nconst text = {\r\n    errConn: {\r\n        es: \"Error de conexión\",\r\n        en: \"Network error\"\r\n    },\r\n    getTokenIdError: {\r\n        es: \"Su sesión ha expirado\",\r\n        en: \"Expired session\"\r\n    }\r\n}\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const logout = useLogout();\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const getAxiosRequest = idToken => axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n            bodyParams, \r\n            {\r\n                headers: {\r\n                    'Authorization': idToken\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                if(doFnAfterSuccess) doFnAfterSuccess(resp, idToken);\r\n                return resp;\r\n            })\r\n            .catch(err => {\r\n                if(!err.response){\r\n                    openErrorNotification(text.errConn[idioma]);                       \r\n                }else if(messageOnError) openErrorNotification(messageOnError);\r\n\r\n                if(doFnAfterError) doFnAfterError(err);\r\n                return err;\r\n            })\r\n    \r\n\r\n        if(firebaseCurrentToken){\r\n            return getAxiosRequest(firebaseCurrentToken)\r\n                .catch(err => {\r\n                    console.log('Error al realizar la peticion con el token guardado en recoil state, asi que intentamos usando firebase');\r\n                    return firebase.auth().currentUser.getIdToken(true)\r\n                        .then(idToken => {\r\n                            return getAxiosRequest(idToken);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log('Error al realizar la peticion con el token proveniente de firebase');\r\n                            logout();\r\n                            return err;\r\n                        });\r\n                })\r\n        }\r\n    };   \r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import {useRecoilState} from 'recoil'\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\nconst NotificationHook = () => {\r\n    \r\n    const [notificationState, setNotificationState] = useRecoilState(notificationAtom);\r\n\r\n    const defaultToOpem = {\r\n        ...notificationState,\r\n        open: true,\r\n        autoHideDuration: 3000\r\n    };\r\n\r\n    const openNotification = properties => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    const openSpecificNotification = (severity, msg) => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            severity: severity,\r\n            msg: msg\r\n        });\r\n    }\r\n\r\n    const openSuccessNotification = msg => {\r\n        openSpecificNotification(\"success\",msg);\r\n    }\r\n\r\n    const openWarningNotification = msg => {\r\n        openSpecificNotification(\"warning\",msg);\r\n    }\r\n\r\n    const openErrorNotification = msg => {\r\n        openSpecificNotification(\"error\",msg);\r\n    }\r\n\r\n    const openInfoNotification = msg => {\r\n        openSpecificNotification(\"info\",msg);\r\n    }\r\n\r\n    return {    \r\n        openNotification: openNotification,\r\n        openSuccessNotification: openSuccessNotification,\r\n        openErrorNotification: openErrorNotification,\r\n        openInfoNotification: openInfoNotification,\r\n        openWarningNotification: openWarningNotification\r\n    };\r\n\r\n}\r\nexport default NotificationHook;","const askNotificationPermission = callback => {\r\n    allowPermission();\r\n    const checkNotificationPromise = () => {\r\n        try { Notification.requestPermission().then(); } \r\n        catch(e) { return false;}\r\n        return true;\r\n    }\r\n\r\n    // function to actually ask the permissions\r\n    const handlePermission = permission => {\r\n        // Whatever the user answers, we make sure Chrome stores the information\r\n        if(!('permission' in Notification)) {\r\n            Notification.permission = permission;\r\n        }\r\n        if(callback) callback();\r\n    }\r\n\r\n    // Let's check if the browser supports notifications\r\n    if (!('Notification' in window)) {\r\n        console.log(\"This browser does not support notifications.\");\r\n    } else {\r\n        if(checkNotificationPromise()) {\r\n            Notification.requestPermission()\r\n                .then((permission) => {\r\n                    handlePermission(permission);\r\n                 })\r\n        } else {\r\n            Notification.requestPermission(function(permission) {\r\n                handlePermission(permission);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst denyPermission = () => {\r\n    localStorage.setItem('denyOSNotification', true);\r\n}\r\nconst allowPermission = () => {\r\n    localStorage.removeItem('denyOSNotification');\r\n}\r\n\r\nconst allowedNotifications = () => {\r\n    return Notification.permission === 'granted' && !localStorage.getItem('denyOSNotification');\r\n}\r\nconst permissionType = () => {\r\n\r\n    return Notification.permission;\r\n}\r\n\r\nexport default {askNotificationPermission, permissionType, denyPermission, allowedNotifications};","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    //server: location.origin\r\n    server: \"https://shut-app-pro.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import {useSetRecoilState} from 'recoil';\r\nimport {loginData, userAvatarState, contactListState, friendsAtom, eraseConversationsWithContacts, view} from '../components/recoil/atoms';\r\nimport { useCallback } from 'react';\r\nimport socketClient from './socket';\r\nimport firebase from './firebase';\r\nconst useLogout = () => {\r\n\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setUserAvatar = useSetRecoilState(userAvatarState);\r\n    const setContactList = useSetRecoilState(contactListState);\r\n    const setFriends = useSetRecoilState(friendsAtom);\r\n    const client = socketClient.getSocket();\r\n    const setView = useSetRecoilState(view.getAtom);\r\n\r\n    return useCallback(() => {\r\n        eraseConversationsWithContacts();\r\n        setUserAvatar(null);\r\n        setContactList([]);\r\n        setFriends([]);\r\n        client.emit('logout', {});\r\n        socketClient.close();\r\n        setLoginData(null);\r\n        firebase.auth().signOut();\r\n        setView(view.posibleViews.LOGIN);\r\n    }, []);\r\n}\r\nexport default useLogout;","import {useState, useEffect} from 'react';\r\n  \r\nlet hidden, visibilityChange; \r\nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support \r\n    hidden = \"hidden\";\r\n    visibilityChange = \"visibilitychange\";\r\n} else if (typeof document.msHidden !== \"undefined\") {\r\n    hidden = \"msHidden\";\r\n    visibilityChange = \"msvisibilitychange\";\r\n} else if (typeof document.webkitHidden !== \"undefined\") {\r\n    hidden = \"webkitHidden\";\r\n    visibilityChange = \"webkitvisibilitychange\";\r\n}\r\n\r\nconst usePageVisibility = () => {\r\n\r\n    const [isVisible, setIsVisible] = useState(true);\r\n\r\n    \r\n\r\n    const handleVisibilityChange = () => {\r\n        if (document[hidden]) {\r\n            setIsVisible(false);\r\n        } else {\r\n            setIsVisible(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof document.addEventListener === \"undefined\" || hidden === undefined) {\r\n            console.log(\"Switch to a Google Chrome or Firefox browser, that supports the Page Visibility API.\");\r\n            setIsVisible(false);\r\n        } else {\r\n            document.addEventListener(visibilityChange, handleVisibilityChange, false);\r\n        }\r\n    }, []);\r\n\r\n    return isVisible;\r\n\r\n}\r\n  export default usePageVisibility;","//import React from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nconst useNewUserSubscriber = props => {\r\n\r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeNewUser = () => {\r\n        client.on('new user', data => {\r\n\r\n            let payload = {\r\n                data:data,\r\n                msg: text.connected\r\n            };\r\n            if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                payload.OSNotification = (nickname, content) => {\r\n                    new Notification(nickname, { body: content, icon: logo });\r\n                }\r\n            }else{\r\n                payload.notification = enqueueSnackbar\r\n            }\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: payload\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n    }\r\n\r\n    const unsSubscribeNewUser = () => {\r\n        client.off('new user');\r\n    }\r\n\r\n    return {\r\n        subscribeNewUser: subscribeNewUser,\r\n        unsSubscribeNewUser: unsSubscribeNewUser\r\n    }\r\n\r\n}\r\nexport default useNewUserSubscriber","import {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst useDisconnectSubscriber = () => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const subscribeDisconnect = () => {\r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n    const unSubscribeDisconnect = () => {\r\n        client.off('user disconnect')\r\n    };\r\n\r\n    return {\r\n        subscribeDisconnect: subscribeDisconnect,\r\n        unSubscribeDisconnect: unSubscribeDisconnect\r\n    };\r\n\r\n}\r\n\r\nexport default useDisconnectSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useRequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeRequestFriend = () => {\r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            \r\n            if(userIdRequested === userData.userId){\r\n                \r\n                postRequest({\r\n                    url: '/users/getFriendById',\r\n                    bodyParams: {\r\n                        friendId: userIdRequester\r\n                    },\r\n                    doFnAfterSuccess: resp => {\r\n                        if(resp.status === 200){                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            const friend = resp.data.friend;\r\n\r\n                            if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                                new Notification(friend.nickname, { body: `${friend.nickname} ${text.requestedInv[idioma]}`, icon: logo });\r\n                            }else{\r\n                                enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                            }\r\n                        }\r\n                    },\r\n                    doFnAfterError: err => {\r\n                        if(!err.response){\r\n                            openErrorNotification(text.connError[idioma]);\r\n                        }else{\r\n                            openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                        }\r\n                    }\r\n                });    \r\n            }\r\n        });\r\n    }\r\n\r\n    const unSubscribeRequestFriend = () => {\r\n        client.off('requested friendship');\r\n    }\r\n\r\n    return {\r\n        subscribeRequestFriend: subscribeRequestFriend,\r\n        unSubscribeRequestFriend: unSubscribeRequestFriend\r\n    }\r\n\r\n}\r\n\r\nexport default useRequestFriendSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission'\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useAcceptedFriendshipSubscriber = props => {\r\n    \r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeAcceptedFriendship = () => {\r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            postRequest({\r\n                url: '/users/getFriendById',\r\n                bodyParams: {\r\n                    friendId: accepterId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n\r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.accept[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            }); \r\n            \r\n        });\r\n    };\r\n\r\n    const unSubscribeAcceptedFriendship = () => {\r\n        client.off('accepted friendship');\r\n    };\r\n\r\n    return {\r\n        subscribeAcceptedFriendship: subscribeAcceptedFriendship,\r\n        unSubscribeAcceptedFriendship: unSubscribeAcceptedFriendship\r\n    }\r\n}\r\n\r\nexport default useAcceptedFriendshipSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxios from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useDeclinedFriendship = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxios();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n\r\n    const subscribeDeclinedFriendship = () => {\r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            postRequest({\r\n                url: \"/users/getFriendById\",\r\n                bodyParams: {\r\n                    friendId: declinerId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        \r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.declinedInv[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                        }})\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeDeclinedFriendship = () => {\r\n        client.off('declined friendship');\r\n    }\r\n\r\n    return {\r\n        subscribeDeclinedFriendship: subscribeDeclinedFriendship,\r\n        unSubscribeDeclinedFriendship: unSubscribeDeclinedFriendship\r\n    };\r\n\r\n}\r\n\r\nexport default useDeclinedFriendship;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxios from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useDeleteContatctSubscriber = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxios();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeDeleteContatct = () => {\r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            postRequest({\r\n                url: \"/users/getFriendById\",\r\n                bodyParams: {\r\n                    friendId: deleterId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.delete[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                        }\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeDeleteContatct = () => {\r\n        client.off('deleted contact');\r\n    }\r\n\r\n    return {\r\n        subscribeDeleteContatct: subscribeDeleteContatct,\r\n        unSubscribeDeleteContatct: unSubscribeDeleteContatct\r\n    };\r\n\r\n}\r\n\r\n\r\nexport default useDeleteContatctSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState, firebaseCurrentTokenState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\nlet stackFns = [];\r\n\r\nconst useRecibedMessageSubscriber = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const firebaseCurrentToken = useRecoilValue(firebaseCurrentTokenState);\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const putInQueque = React.useCallback(fn => {\r\n        stackFns.push(fn);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(isBrowserVisble){\r\n            stackFns\r\n                .reverse()\r\n                .forEach(fn => fn());\r\n            stackFns = [];\r\n        }\r\n    }, [isBrowserVisble]);\r\n\r\n    \r\n    useEffect(() => {\r\n        subscribeRecibedMessage();\r\n        return unSubscribeRecibedMessage;\r\n\r\n    }, [friends, activeChatContactId, isBrowserVisble, idioma]);\r\n\r\n    \r\n    const subscribeRecibedMessage = () => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime}) => {\r\n            \r\n            if(friends.length > 0){\r\n                const contact = friends.find(f => f.contactId === userOriginId);\r\n                if(activeChatContactId !== userOriginId){                \r\n                    if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                        new Notification(contact.nickname, { body: content, icon: logo });\r\n                    }else{\r\n                        enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n                    }\r\n    \r\n                    const dataObj = {\r\n                        [userOriginId]: {\r\n                            cantidad: 1,\r\n                            lastMessage: content,\r\n                            datetime: datetime\r\n                        }\r\n                    };\r\n                    \r\n                    friendDispatcher({\r\n                        action: 'set_message_info',\r\n                        payload: {\r\n                            dataObj: dataObj\r\n                        }\r\n                    });\r\n    \r\n                }else{\r\n                    if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                        new Notification(contact.nickname, { body: content, icon: logo });\r\n                    }\r\n    \r\n                    const dataObj = {\r\n                        [userOriginId]: {\r\n                            cantidad: 0,\r\n                            lastMessage: content,\r\n                            datetime: datetime\r\n                        }\r\n                    };\r\n                    \r\n                    friendDispatcher({\r\n                        action: 'set_message_info',\r\n                        payload: {\r\n                            dataObj: dataObj\r\n                        }\r\n                    });\r\n    \r\n                    const fn = () => {\r\n                        const client = socketClient.getSocket();\r\n                        client.emit('read messages', {\r\n                            userId: userData.userId,\r\n                            contactId: contact.contactId,\r\n                            notifyTo: contact.socketId,\r\n                            token: firebaseCurrentToken\r\n                        });\r\n                    }\r\n                    if(isBrowserVisble) fn();\r\n                    else putInQueque(fn);\r\n                    \r\n                }\r\n                \r\n                addMsgToConversation({\r\n                    contactId: userOriginId,\r\n                    messageId: messageId,\r\n                    content: content,\r\n                    datetime: datetime,\r\n                    state: 0\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const unSubscribeRecibedMessage = () => {\r\n        client.off('recived message');\r\n    }\r\n\r\n    return {\r\n        subscribeRecibedMessage: subscribeRecibedMessage,\r\n        unSubscribeRecibedMessage: unSubscribeRecibedMessage\r\n    };\r\n\r\n}\r\n\r\nexport default useRecibedMessageSubscriber;","import {useSetRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport { editMsgToStateSavedSelector} from '../recoil/selectors';\r\n\r\n\r\nconst useSavedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    \r\n\r\n    const subscribeSavedMessage = () => {\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeSavedMessage = () => {\r\n        client.off('saved message');\r\n    }\r\n\r\n    return {\r\n        subscribeSavedMessage: subscribeSavedMessage,\r\n        unSubscribeSavedMessage: unSubscribeSavedMessage\r\n    };\r\n\r\n}\r\nexport default useSavedMessageSubscriber;","\r\nimport {useSetRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {editAllMsgToReadedSelector} from '../recoil/selectors';\r\n\r\nconst useReadedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n\r\n    const subscribeReadedMessage = () => {\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n    }\r\n\r\n    const unSubscribeReadedMessage = () => {\r\n        client.off('readed messages');\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        subscribeReadedMessage: subscribeReadedMessage,\r\n        unSubscribeReadedMessage: unSubscribeReadedMessage\r\n    };\r\n\r\n}\r\nexport default useReadedMessageSubscriber;","import socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useBrowserVisibility from '../../utils/browserVisibility';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport logo from '../../statics/logo192-removebg-preview.png';\r\n\r\n\r\nconst useBlokedContactSubscriber = () => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n    const {postRequest} = useAxiosHook();\r\n    const isBrowserVisble = useBrowserVisibility();\r\n\r\n    const subscribeBlokedContact = () => {\r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            postRequest({\r\n                url: '/users/getFriendById',\r\n                bodyParams:{\r\n                    friendId: blokerId\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        const friend = resp.data.friend;\r\n                        \r\n                        if(OS_Notification.allowedNotifications() && !isBrowserVisble){\r\n                            new Notification(friend.nickname, { body: `${friend.nickname} ${text.block[idioma]}`, icon: logo });\r\n                        }else{\r\n                            enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                        }\r\n                        \r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const unSubscribeBlokedContact = () => {\r\n        client.off('bloked contact');\r\n    }\r\n\r\n    return {\r\n        subscribeBlokedContact: subscribeBlokedContact,\r\n        unSubscribeBlokedContact: unSubscribeBlokedContact\r\n    };\r\n\r\n}\r\n\r\nexport default useBlokedContactSubscriber;","import React from 'react';\r\n\r\n// Eventos\r\nimport useNewUserSubscriber from './newUserSubscriber';\r\nimport useUserDisconnectSubscriber from './userDisconnectSubscriber';\r\nimport useRequestFriendSubscriber from './requestFriendshipSubscriber';\r\nimport useAcceptFriendshipSubscriber from './acceptedFriendshipSubscriber';\r\nimport useDeclinedFriendshipSubscriber from './declinedFriendshipSubscriber';\r\nimport useDeletedContactSubscriber from './deletedContactSubscriber';\r\n\r\nimport useRecibedMessageSubscriber from './recibedMessageSubscriber';\r\nimport useSavedMessageSubscriber from './savedMessageSubscriber';\r\nimport useReadedMessageSubscriber from './readedMessageSubscriber';\r\nimport useBlokedContactSubscriber from './blokedContactSubscriber';\r\n\r\n\r\n/*\r\nimport IncomingMsgSubscriber from './incomingMsgSubscriber';\r\n\r\n*/\r\n\r\nconst useEvents = props => {\r\n\r\n    const {subscribeNewUser, unsSubscribeNewUser} = useNewUserSubscriber();\r\n    const {subscribeDisconnect, unSubscribeDisconnect} = useUserDisconnectSubscriber();\r\n    const {subscribeRequestFriend, unSubscribeRequestFriend} = useRequestFriendSubscriber();\r\n    const {subscribeAcceptedFriendship, unSubscribeAcceptedFriendship} = useAcceptFriendshipSubscriber();\r\n    const {subscribeDeclinedFriendship, unSubscribeDeclinedFriendship} = useDeclinedFriendshipSubscriber();\r\n    const {subscribeDeleteContatct, unSubscribeDeleteContatct} = useDeletedContactSubscriber();\r\n    const {subscribeRecibedMessage, unSubscribeRecibedMessage} = useRecibedMessageSubscriber();\r\n    const {subscribeSavedMessage, unSubscribeSavedMessage} = useSavedMessageSubscriber();\r\n    const {subscribeReadedMessage, unSubscribeReadedMessage} = useReadedMessageSubscriber();\r\n    const {subscribeBlokedContact, unSubscribeBlokedContact} = useBlokedContactSubscriber();\r\n\r\n\r\n\r\n    const subscribeAll = React.useCallback(() => {\r\n        subscribeNewUser();\r\n        subscribeDisconnect();\r\n        subscribeRequestFriend();\r\n        subscribeAcceptedFriendship();\r\n        subscribeDeclinedFriendship();\r\n        subscribeDeleteContatct();\r\n        subscribeRecibedMessage();\r\n        subscribeSavedMessage();\r\n        subscribeReadedMessage();\r\n        subscribeBlokedContact();\r\n    },[]);\r\n\r\n    const unSubscribeAll = React.useCallback(() => {\r\n        unsSubscribeNewUser();\r\n        unSubscribeDisconnect();\r\n        unSubscribeRequestFriend();\r\n        unSubscribeAcceptedFriendship();\r\n        unSubscribeDeclinedFriendship();\r\n        unSubscribeDeleteContatct();\r\n        unSubscribeRecibedMessage();\r\n        unSubscribeSavedMessage();\r\n        unSubscribeReadedMessage();\r\n        unSubscribeBlokedContact();\r\n    },[]);\r\n\r\n\r\n\r\n    return {\r\n        subscribeAll: subscribeAll,\r\n        unSubscribeAll: unSubscribeAll\r\n    };\r\n\r\n}\r\nexport default useEvents;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component – normally `Avatar`.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"g\", {\n  fillRule: \"evenodd\"\n}, _react.default.createElement(\"path\", {\n  d: \"M9 17l3-2.94c-.39-.04-.68-.06-1-.06-2.67 0-8 1.34-8 4v2h9l-3-3zm2-5c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4M15.47 20.5L12 17l1.4-1.41 2.07 2.08 5.13-5.17 1.4 1.41z\"\n})), 'HowToReg');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M22 4h-2c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h2V4zM2.17 11.12c-.11.25-.17.52-.17.8V13c0 1.1.9 2 2 2h5.5l-.92 4.65c-.05.22-.02.46.08.66.23.45.52.86.88 1.22L10 22l6.41-6.41c.38-.38.59-.89.59-1.42V6.34C17 5.05 15.95 4 14.66 4h-8.1c-.71 0-1.36.37-1.72.97l-2.67 6.15z\"\n}), 'ThumbDownAlt');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12.99 9.18c0-.06.01-.12.01-.18 0-2.21-1.79-4-4-4-.06 0-.12.01-.18.01l4.17 4.17zm-6.1-3.56L4.27 3 3 4.27l2.62 2.62C5.23 7.5 5 8.22 5 9c0 2.21 1.79 4 4 4 .78 0 1.5-.23 2.11-.62L19.73 21 21 19.73l-8.62-8.62-5.49-5.49zM9 15c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm7.76-9.64l-1.68 1.69c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z\"\n}), 'VoiceOverOff');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\n}), 'Info');\n\nexports.default = _default;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport HowToRegIcon from '@material-ui/icons/HowToReg';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst AcceptInvActionView = ({idioma, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <HowToRegIcon fontSize=\"small\" color=\"primary\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.acceptInv[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default AcceptInvActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, updateFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\n\r\n\r\nimport AcceptInvActionView from './acceptinv.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\n\r\nconst AcceptInvActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    //const switchContact = useSetRecoilState(updateFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n\r\n        postRequest({\r\n            url: '/users/acceptFriendRequest',\r\n            bodyParams: {\r\n                acceptedUserId: contact.contactId\r\n            },\r\n            doFnAfterSuccess: (resp, token) => {\r\n                friendDispatcher({action: 'update', payload: {friend: {...resp.data.friend, socketId: contact.socketId}}});\r\n                const client = socketClient.getSocket();\r\n                \r\n                client.emit('accept friendship', {\r\n                    accepterId: userData.userId,\r\n                    socketIdRequester: contact.socketId,\r\n                    token: token\r\n                });\r\n            },\r\n            messageOnError: text.errorAccepting[idioma]\r\n        });\r\n        \r\n    }\r\n\r\n    return <AcceptInvActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default AcceptInvActionController;","import React from 'react';\r\nimport AcceptInvController from './acceptInv.controller';\r\nconst AcceptInv = props => {\r\n\r\n    return <AcceptInvController {...props}/>;\r\n\r\n}\r\nexport default AcceptInv;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\n\r\nconst DeclineInvActionView = ({idioma, text, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <ThumbDownAltIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.decline[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default DeclineInvActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport { friendSelector } from '../../../../components/recoil/selectors';\r\nimport socketClient from '../../../../utils/socket';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport text from './idioma.json'\r\nimport DeclineInvActionView from './declineinv.view';\r\n\r\n\r\nconst DeclineInvActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    //const eliminarContacto = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n\r\n        postRequest({\r\n            url: '/users/declineFriendRequest',\r\n            bodyParams: {\r\n                declinedUserId: contact.contactId\r\n            },\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n                    const socket = socketClient.getSocket();\r\n                    socket.emit('decline friendship', {\r\n                        declinerId: userData.userId,\r\n                        declinedId: contact.contactId,\r\n                        socketIdDeclined: contact.socketId,\r\n                        token: token\r\n                    });\r\n                }\r\n            },\r\n            messageOnError: text.errorDeclining[idioma]\r\n        });\r\n        \r\n    }\r\n\r\n    return <DeclineInvActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n        text={text}\r\n    />;\r\n\r\n}\r\nexport default DeclineInvActionController;","import React from 'react';\r\nimport DeclineInvController from './declineInv.controller';\r\nconst DeclineInv = props => {\r\n\r\n    return <DeclineInvController {...props}/>;\r\n\r\n}\r\nexport default DeclineInv;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst DeleteActionView = ({idioma, onClick, text}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <DeleteIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.delete[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default DeleteActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport DeleteActionView from './delete.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst DeleteActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    //const deleteFriend = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n\r\n    const onClick = () => {\r\n\r\n        preAction();\r\n        postRequest({\r\n            url: '/users/deleteContact',\r\n            bodyParams: {deletedUserId: contact.contactId},\r\n            messageOnError: text.onDeleteError[idioma],\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n\r\n                    if(contact.friendShipStatus === 1){\r\n                        const client = socketClient.getSocket();\r\n                        client.emit('delete contact', {\r\n                            deleterId: userData.userId,\r\n                            socketIdDeleted: contact.socketId,\r\n                            token: token\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <DeleteActionView \r\n        idioma={idioma}\r\n        text={text}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default DeleteActionController;","import React from 'react';\r\nimport DeleteController from './delete.controller';\r\nconst DeleteAction = props => {\r\n\r\n    return <DeleteController {...props} />;\r\n\r\n}\r\nexport default DeleteAction;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport VoiceOverOffIcon from '@material-ui/icons/VoiceOverOff';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst BlockActionView = ({idioma, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <VoiceOverOffIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.block[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default BlockActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport BlockActionView from './block.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst BlockActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    //const deleteContact = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n        \r\n        postRequest({\r\n            url: '/users/blockUser',\r\n            bodyParams: {blokedUserId: contact.contactId},\r\n            messageOnError: text.onBlockError[idioma],\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    //deleteContact(contact.contactId);\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n                    const client = socketClient.getSocket();\r\n                    client.emit('block contact', {\r\n                        blokerId: userData.userId, \r\n                        socketIdBloked: contact.socketId,\r\n                        token: token\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <BlockActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default BlockActionController;","import React from 'react';\r\nimport BlockController from './block.controller';\r\nconst BlockAction = props => {\r\n\r\n    return <BlockController {...props}/>;\r\n\r\n}\r\nexport default BlockAction;","import React from 'react';\r\n\r\nimport AcceptInv from './acceptInvAction';\r\nimport DeclineInv from './declineInvAction';\r\nimport DeleteFriend from './deleteAction';\r\nimport BlockContact from './blockAction';\r\n/*\r\n    1- ACEPTED -> Eliminar, Bloquear\r\n    2- REQUESTED -> Cancelar, Bloquear\r\n    3- ASKED -> Aceptar, Cancelar, bloquear\r\n    4- DECLINED -> Cancelar, Bloquear\r\n    5- Blocked -> Eliminar\r\n    6- Deleted -> Eliminar\r\n*/\r\n\r\nconst ContactActionProxy = ({handleClose, contact}) => {\r\n    \r\n\r\n    const preAction = () => {\r\n        handleClose()\r\n    }\r\n\r\n    \r\n    \r\n    switch(contact.friendShipStatus){\r\n        case 1: return (\r\n            <>\r\n                <DeleteFriend  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n            );\r\n        case 2: return (\r\n            <>\r\n                <DeclineInv preAction={preAction} contact={contact}/>\r\n                <BlockContact preAction={preAction} contact={contact}/>\r\n            </>\r\n        ); \r\n        case 3: return (\r\n            <>\r\n                <AcceptInv  preAction={preAction} contact={contact}/>\r\n                <DeclineInv  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n        );\r\n        case 4: return (\r\n            <>\r\n                <DeleteFriend  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n        );\r\n        case 5: return <DeleteFriend  preAction={preAction} contact={contact}/>;\r\n        case 6: return <DeleteFriend  preAction={preAction} contact={contact}/>;\r\n        default: return null;\r\n    }\r\n}\r\n\r\nexport default ContactActionProxy;","import React from 'react';\r\nimport formatRelative from 'date-fns/formatRelative';\r\nimport  es from 'date-fns/locale/es';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { red, green} from '@material-ui/core/colors';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport text from './idioma.json';\r\n\r\nimport ActionProxy from './contactAction.proxy';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    infoIcon: {\r\n        marginRight: '-12px',\r\n        overflow: 'visible',\r\n        textAlign: 'center',\r\n        flex: '0 0 auto',\r\n        \r\n        color: 'rgba(0, 0, 0, 0.54)',\r\n        padding: '12px',\r\n        fontSize: '1.5rem',\r\n        transition: 'background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n        borderRadius: '50%',\r\n\r\n        \r\n        border: 0,\r\n        cursor: 'pointer',\r\n        margin: 0,\r\n        display: 'inline-flex',\r\n        outline: 0,\r\n        \r\n        position: 'relative',\r\n        alignItems: 'center',\r\n        userSelect: 'none',\r\n        \r\n        verticalAlign: 'middle',\r\n        \r\n        justifyContent: 'center',\r\n        textDecoration: 'none'\r\n    },\r\n    listItemText: {\r\n        paddingRight: theme.spacing(10)\r\n    },\r\n    primaryText: {\r\n        color: theme.palette.text.primary\r\n    },\r\n    secondaryText: {\r\n        color: theme.palette.text.secondary\r\n    }\r\n}));\r\n\r\nconst OnlineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px white`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OfflineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: theme.palette.grey[500],\r\n        color: theme.palette.grey[500],\r\n\r\n        \r\n        \r\n        boxShadow: `0 0 0 2px white`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OnlineBadge = props => {\r\n    \r\n    if(props.contact.socketId && props.contact.friendShipStatus === 1){\r\n        return (<OnlineStyledBadge\r\n                overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    {props.children}\r\n                </OnlineStyledBadge>)\r\n            ;\r\n    }\r\n    else {\r\n        return (<OfflineStyledBadge\r\n            overlap=\"circle\"\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                variant=\"dot\"\r\n            >\r\n                {props.children}\r\n            </OfflineStyledBadge>)\r\n        ;\r\n    }\r\n}\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n      border: '1px solid #d3d4d5',\r\n    },\r\n  })((props) => (\r\n    <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      {...props}\r\n    />\r\n  ));\r\nconst useCustomTooltipGreenStyle = makeStyles((theme) => ({\r\n    arrow: {\r\n      color: green[500]\r\n    },\r\n    tooltip: {\r\n      backgroundColor: green[500]\r\n    },\r\n  }));\r\n  const useCustomTooltipRedStyle = makeStyles((theme) => ({\r\n    arrow: {\r\n      color: red[500]\r\n    },\r\n    tooltip: {\r\n      backgroundColor: red[500]\r\n    },\r\n  }));\r\nconst CustomTooltip = props => {\r\n    const classesRed = useCustomTooltipRedStyle();\r\n    const classesGreen = useCustomTooltipGreenStyle();\r\n\r\n    return <Tooltip arrow classes={props.color === 'red' ? classesRed : classesGreen} {...props} />;\r\n}\r\n\r\n\r\nconst ContactView = React.memo(\r\n    ({idioma, contact, handleMenu,\r\n    handleClose, anchorEl, openChat}) => {\r\n    const lastMsg = contact.lastMsg ? contact.lastMsg : '' ;\r\n    \r\n    const options = idioma === 'es' ? { locale: es } : {};\r\n    const lastMsgTime = contact.datetime ? formatRelative(new Date(contact.datetime), new Date(), options) : '';\r\n    \r\n    \r\n    \r\n    const classes = useStyle();\r\n    //const avatarUrl = contact.avatarUrl ? `${DEFAULT_CONFIG.server}${contact.avatarUrl}` : null;\r\n    const avatarUrl = contact.avatarUrl ? contact.avatarUrl : null;\r\n\r\n    \r\n\r\n    return (<>\r\n        <ListItem button onClick={openChat}>\r\n            <ListItemAvatar>\r\n                <OnlineBadge contact={contact}>\r\n                    {contact.unread && contact.unread > 0 \r\n                    ? <Badge color=\"secondary\" badgeContent={contact.unread}>\r\n                        <Avatar\r\n                            src={avatarUrl}\r\n                        />\r\n                    </Badge>\r\n                    : <Avatar\r\n                            src={avatarUrl}\r\n                        />\r\n                    }\r\n                </OnlineBadge>\r\n            </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={contact.nickname}\r\n                    \r\n                    secondary={contact.friendShipStatus > 1 ? text[contact.friendShipStatusCode][idioma] : `${lastMsg.slice(0, 55)}... ${lastMsgTime}`}\r\n                    secondaryTypographyProps={contact.friendShipStatus > 3 \r\n                        ? {\r\n                            style: {color: `${red[500]}`}\r\n\r\n                        } \r\n                        : contact.friendShipStatus < 4 && contact.friendShipStatus > 1 ? {\r\n                            style: {color: `${green[500]}`}\r\n                        } : {}\r\n                    }\r\n                    className={classes.listItemText}\r\n                    classes={{\r\n                        primary: classes.primaryText,\r\n                        secondary: classes.secondaryText\r\n                    }}\r\n                />\r\n                \r\n                {contact.friendShipStatus > 1 ?\r\n                    <CustomTooltip title={text[`desc${contact.friendShipStatusCode}`][idioma]} color={contact.friendShipStatus > 3 ? 'red' : 'geen'}>\r\n                        <div className={classes.infoIcon}>\r\n                            <InfoIcon id=\"idIconInfoFriendStatus\" fontSize=\"small\" style={{color: contact.friendShipStatus > 3 ? red[500] : green[500]}}/>\r\n                        </div>\r\n                    </CustomTooltip>\r\n                : null }\r\n            \r\n            <ListItemSecondaryAction>\r\n                \r\n                \r\n                <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleMenu}>\r\n                    <MoreVertIcon id=\"idIconFriendActions\" fontSize=\"default\"/>\r\n                </IconButton>\r\n                <StyledMenu\r\n                    id=\"customized-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                >   \r\n                    <ActionProxy handleClose={handleClose} contact={contact}/>\r\n                </StyledMenu>\r\n            </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n        <Divider variant=\"inset\" component=\"li\" />\r\n        </>\r\n    );\r\n})\r\n\r\n\r\nexport default ContactView;","import React, {useState, useCallback} from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, activeChatWith, loginData} from '../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../components/recoil/selectors';\r\nimport ContactView from './contact.view';\r\nimport socketClient from '../../../utils/socket';\r\nimport firebase from '../../../utils/firebase';\r\n\r\nconst ContactContrller = ({contact}) => {\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const setActiveChat = useSetRecoilState(activeChatWith);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    \r\n    const handleClose = useCallback(() => {\r\n        setAnchorEl(null);\r\n    },[]);\r\n\r\n    const openChat = () => {        \r\n        setActiveChat(contact.contactId);\r\n\r\n        // Poner el estado en leidos\r\n        friendDispatcher({\r\n            action: 'reset_cant_no_leidos',\r\n            payload: {\r\n                contactId: contact.contactId,\r\n            }\r\n        });\r\n        // Emit como leidos\r\n        const client = socketClient.getSocket();\r\n        firebase.auth().currentUser.getIdToken(true)\r\n            .then(token => {\r\n                client.emit('read messages', {\r\n                    userId: userData.userId,\r\n                    contactId: contact.contactId,\r\n                    notifyTo: contact.socketId,\r\n                    token: token\r\n                });\r\n            })\r\n            .catch(err => console.log(err));\r\n        \r\n    }\r\n\r\n    return <ContactView \r\n        handleMenu={handleMenu}\r\n        handleClose={handleClose}\r\n        contact={contact}\r\n        anchorEl={anchorEl}\r\n        idioma={idioma}\r\n        openChat={openChat}\r\n    />;\r\n\r\n}\r\nexport default ContactContrller;","import React from 'react';\r\n\r\nimport ContactController from './contact.controller';\r\nconst Contact = props => {\r\n\r\n    return <ContactController \r\n        {...props}\r\n    />;\r\n\r\n}\r\nexport default Contact;","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Contact from './contact';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    scroll: {\r\n        position: 'relative',\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        overflowY: 'auto',\r\n        height: `calc(100% - ${theme.spacing(8)}px)`\r\n    },\r\n    offsetDown: {\r\n        ...theme.mixins.toolbar, \r\n        bottom: 0,\r\n        position: 'relative'\r\n    }\r\n}));\r\n\r\n\r\nconst ContactsView = ({idioma, text, contacts}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.scroll}>\r\n            <List id='lista'>\r\n                {contacts.length > 0 \r\n                    ? contacts.map((contact) => <Contact contact={contact} key={contact.contactId}/>)\r\n                    : <div style={{margin: '2em'}}>\r\n                            <Divider/>\r\n                            <Typography variant=\"h5\" align='justify' color=\"textPrimary\">{text.goMakeFriends[idioma]}</Typography>\r\n                            <Divider/>\r\n                            <Typography variant=\"subtitle1\" align='justify' color=\"textPrimary\" style={{marginTop: '1em'}}>{text.beta[idioma]}</Typography>\r\n                        </div>\r\n                }\r\n            </List>\r\n            <div className={classes.offsetDown}/>\r\n            <div className={classes.offsetDown}/>\r\n            \r\n        </div>\r\n    );\r\n\r\n}\r\nexport default ContactsView;","import React, { useEffect, useCallback, useState, Suspense} from 'react';\r\nimport {useRecoilState, useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {idiomaState, loginData, userAvatarState, darkModeAtom, view, newAvatarState} from '../../components/recoil/atoms';\r\nimport {tourAtom} from '../tour/tour.atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport OS_Notification from '../../utils/OS_NotificationPermission';\r\nimport ContactsView from './contacs.view';\r\nimport text from './idioma.json';\r\nimport useEvents from '../../components/events';\r\nimport useLogout from '../../utils/useLogout';\r\nimport  Dialog  from '@material-ui/core/Dialog';\r\n\r\nconst UpdateAvatarCmp = React.lazy(() => import('./updateAvatar'));\r\n\r\nconst ContactsController = props => {\r\n\r\n    \r\n    const dark = useRecoilValue(darkModeAtom);\r\n    const {subscribeAll} = useEvents();\r\n    const [userData, setLoginData] = useRecoilState(loginData);\r\n    const setUserAvatarState = useSetRecoilState(userAvatarState);\r\n    const setView = useSetRecoilState(view.getAtom);\r\n    const setNewUserAvatarState = useSetRecoilState(newAvatarState);\r\n    const setTourState = useSetRecoilState(tourAtom);\r\n    const {postRequest} = useAxiosHook();\r\n    const loguot = useLogout();\r\n    \r\n    const [contacts, friendDispatcher] = useRecoilState(friendSelector);\r\n\r\n    const [idioma, setIdiomaState] = useRecoilState(idiomaState);\r\n\r\n    const [openUpdateAvatar, setOpenUpdateAvatar] = useState(false);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setOpenUpdateAvatar(false);\r\n    }, []);\r\n\r\n    const loadData = () => {\r\n        \r\n        postRequest({\r\n            url: '/users/getUserData',\r\n            bodyParams: {\r\n                language: idioma\r\n            },\r\n            doFnAfterSuccess: userResp => {\r\n                if(userResp.status === 200 || userResp.status === 201){\r\n                    const {\r\n                        _id, nickname, firstName,\r\n                        lastName, email, language, avatarUrl,avatarChanged, oauthAvatarUrl\r\n                    } = userResp.data.user;\r\n                    \r\n                    if(avatarChanged){\r\n                        // Lanzar promt de si quiere actualizar su avatar\r\n                        setOpenUpdateAvatar(true);\r\n                        setNewUserAvatarState(oauthAvatarUrl);\r\n                    }\r\n                    setLoginData({\r\n                        userId: _id, \r\n                        nickname: nickname,\r\n                        firstName: firstName,\r\n                        lastName: lastName,\r\n                        email: email\r\n                    });\r\n                    setIdiomaState(language);\r\n                    setUserAvatarState(avatarUrl);\r\n                }\r\n                if(userResp.status === 201){\r\n                    // Si es un usuario nuevo le doy un tour por la app\r\n                    OS_Notification.askNotificationPermission(() => setTourState(true));\r\n                }\r\n            },\r\n            doFnAfterError: err => {\r\n                loguot();\r\n            }\r\n        });\r\n\r\n\r\n        const friendsPromise = postRequest({\r\n            url: '/users/searchFirends'\r\n        })\r\n        .then(friendsResp => {\r\n            if(friendsResp.status === 200){\r\n                friendDispatcher({\r\n                    action: 'initialize', \r\n                    payload: {\r\n                        friends: friendsResp.data.friends\r\n                    }});\r\n                //subscribeAll();\r\n            }\r\n        });\r\n\r\n        const friendsDataPromise = postRequest({\r\n            url: '/users/getContactData'\r\n        });\r\n\r\n        Promise.all([friendsPromise, friendsDataPromise])\r\n            .then(([friendsResp, friendsDataResp]) => {\r\n\r\n                if(friendsDataResp.status === 200){\r\n                    friendDispatcher({\r\n                        action: 'set_message_info',\r\n                        payload: {\r\n                            dataObj: friendsDataResp.data.contactsData\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .then(() => {\r\n                subscribeAll();\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(contacts.length === 0 && userData !== null)\r\n            loadData();        \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(userData === null){\r\n            setView(view.posibleViews.LOGIN);\r\n        }\r\n    }, [userData]);\r\n\r\n    return userData !== null \r\n            &&  <>\r\n                <ContactsView \r\n                    idioma={idioma}\r\n                    contacts={contacts}\r\n                    text={text}\r\n                    isDark={dark}\r\n                /> \r\n                <Dialog open={openUpdateAvatar} /*onClose={handleClose}*/>\r\n                    <Suspense fallback={<></>}>\r\n                        <UpdateAvatarCmp \r\n                            handleClose={handleClose}\r\n                        />\r\n                    </Suspense>\r\n                </Dialog>\r\n            </>\r\n}\r\n\r\nexport default ContactsController;","import React from 'react';\r\nimport ContactsController from './contacts.controller';\r\n\r\nconst Contacts = props => {\r\n    return <ContactsController />;\r\n\r\n}\r\nexport default Contacts;"],"sourceRoot":""}